{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nvar MapBrowserEvent = /** @class */function (_super) {\n  __extends(MapBrowserEvent, _super);\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [opt_dragging] Is the map currently being dragged?\n   * @param {import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   * @param {Array<PointerEvent>} [opt_activePointers] Active pointers.\n   */\n  function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState, opt_activePointers) {\n    var _this = _super.call(this, type, map, opt_frameState) || this;\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    _this.originalEvent = originalEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    _this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    _this.activePointers = opt_activePointers;\n    return _this;\n  }\n  Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n    /**\n     * The map pixel relative to the viewport corresponding to the original event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    get: function () {\n      if (!this.pixel_) {\n        this.pixel_ = this.map.getEventPixel(this.originalEvent);\n      }\n      return this.pixel_;\n    },\n    set: function (pixel) {\n      this.pixel_ = pixel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n    /**\n     * The coordinate corresponding to the original browser event.  This will be in the user\n     * projection if one is set.  Otherwise it will be in the view projection.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    get: function () {\n      if (!this.coordinate_) {\n        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n      }\n      return this.coordinate_;\n    },\n    set: function (coordinate) {\n      this.coordinate_ = coordinate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  MapBrowserEvent.prototype.preventDefault = function () {\n    _super.prototype.preventDefault.call(this);\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */this.originalEvent.preventDefault();\n    }\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  MapBrowserEvent.prototype.stopPropagation = function () {\n    _super.prototype.stopPropagation.call(this);\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */this.originalEvent.stopPropagation();\n    }\n  };\n  return MapBrowserEvent;\n}(MapEvent);\nexport default MapBrowserEvent;","map":{"version":3,"sources":["src/MapBrowserEvent.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;AAEG;AACH,OAAO,QAAQ,MAAM,eAAe;AAEpC;;;;;AAKG;AACH,IAAA,eAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA8B,SAAA,CAAA,eAAA,EAAA,MAAA,CAAA;EAC5B;;;;;;;AAOG;EACH,SAAA,eAAA,CACE,IAAI,EACJ,GAAG,EACH,aAAa,EACb,YAAY,EACZ,cAAc,EACd,kBAAkB,EAAA;IANpB,IAAA,KAAA,GAQE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAI,EAAE,GAAG,EAAE,cAAc,CAAC,IAAA,IAAA;IAEhC;;;;;AAKG;IACH,KAAI,CAAC,aAAa,GAAG,aAAa;IAElC;;;AAGG;IACH,KAAI,CAAC,MAAM,GAAG,IAAI;IAElB;;;AAGG;IACH,KAAI,CAAC,WAAW,GAAG,IAAI;IAEvB;;;;;;AAMG;IACH,KAAI,CAAC,QAAQ,GAAG,YAAY,KAAK,SAAS,GAAG,YAAY,GAAG,KAAK;IAEjE;;AAEG;IACH,KAAI,CAAC,cAAc,GAAG,kBAAkB;;EAC1C;EAOA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAA,EAAA,OAAK,EAAA;IALT;;;;AAIG;SACH,SAAA,CAAA,EAAA;MACE,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC;MACzD;MACD,OAAO,IAAI,CAAC,MAAM;IACpB,CAAC;SACD,SAAA,CAAU,KAAK,EAAA;MACb,IAAI,CAAC,MAAM,GAAG,KAAK;IACrB,CAAC;;;IAHA;EAWD,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAA,EAAA,YAAU,EAAA;IANd;;;;;AAKG;SACH,SAAA,CAAA,EAAA;MACE,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;QACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC;MAC/D;MACD,OAAO,IAAI,CAAC,WAAW;IACzB,CAAC;SACD,SAAA,CAAe,UAAU,EAAA;MACvB,IAAI,CAAC,WAAW,GAAG,UAAU;IAC/B,CAAC;;;IAHA;EAKD;;;;AAIG;EACH,eAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,cAAc,CAAA,IAAA,CAAA,IAAA,CAAE;IACtB,IAAI,gBAAgB,IAAI,IAAI,CAAC,aAAa,EAAE;MAC1C,sBAAwB,IAAI,CAAC,aAAa,CAAE,cAAc,CAAA,CAAE;IAC7D;EACH,CAAC;EAED;;;;AAIG;EACH,eAAA,CAAA,SAAA,CAAA,eAAe,GAAf,YAAA;IACE,MAAA,CAAA,SAAA,CAAM,eAAe,CAAA,IAAA,CAAA,IAAA,CAAE;IACvB,IAAI,iBAAiB,IAAI,IAAI,CAAC,aAAa,EAAE;MAC3C,sBAAwB,IAAI,CAAC,aAAa,CAAE,eAAe,CAAA,CAAE;IAC9D;EACH,CAAC;EACH,OAAA,eAAC;AAAD,CAAC,CA5G6B,QAAQ,CAAA;AA8GtC,eAAe,eAAe","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nvar MapBrowserEvent = /** @class */ (function (_super) {\n    __extends(MapBrowserEvent, _super);\n    /**\n     * @param {string} type Event type.\n     * @param {import(\"./PluggableMap.js\").default} map Map.\n     * @param {EVENT} originalEvent Original event.\n     * @param {boolean} [opt_dragging] Is the map currently being dragged?\n     * @param {import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n     * @param {Array<PointerEvent>} [opt_activePointers] Active pointers.\n     */\n    function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState, opt_activePointers) {\n        var _this = _super.call(this, type, map, opt_frameState) || this;\n        /**\n         * The original browser event.\n         * @const\n         * @type {EVENT}\n         * @api\n         */\n        _this.originalEvent = originalEvent;\n        /**\n         * The map pixel relative to the viewport corresponding to the original browser event.\n         * @type {?import(\"./pixel.js\").Pixel}\n         */\n        _this.pixel_ = null;\n        /**\n         * The coordinate in the user projection corresponding to the original browser event.\n         * @type {?import(\"./coordinate.js\").Coordinate}\n         */\n        _this.coordinate_ = null;\n        /**\n         * Indicates if the map is currently being dragged. Only set for\n         * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n         *\n         * @type {boolean}\n         * @api\n         */\n        _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n        /**\n         * @type {Array<PointerEvent>|undefined}\n         */\n        _this.activePointers = opt_activePointers;\n        return _this;\n    }\n    Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n        /**\n         * The map pixel relative to the viewport corresponding to the original event.\n         * @type {import(\"./pixel.js\").Pixel}\n         * @api\n         */\n        get: function () {\n            if (!this.pixel_) {\n                this.pixel_ = this.map.getEventPixel(this.originalEvent);\n            }\n            return this.pixel_;\n        },\n        set: function (pixel) {\n            this.pixel_ = pixel;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n        /**\n         * The coordinate corresponding to the original browser event.  This will be in the user\n         * projection if one is set.  Otherwise it will be in the view projection.\n         * @type {import(\"./coordinate.js\").Coordinate}\n         * @api\n         */\n        get: function () {\n            if (!this.coordinate_) {\n                this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n            }\n            return this.coordinate_;\n        },\n        set: function (coordinate) {\n            this.coordinate_ = coordinate;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Prevents the default browser action.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n     * @api\n     */\n    MapBrowserEvent.prototype.preventDefault = function () {\n        _super.prototype.preventDefault.call(this);\n        if ('preventDefault' in this.originalEvent) {\n            /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n        }\n    };\n    /**\n     * Prevents further propagation of the current event.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n     * @api\n     */\n    MapBrowserEvent.prototype.stopPropagation = function () {\n        _super.prototype.stopPropagation.call(this);\n        if ('stopPropagation' in this.originalEvent) {\n            /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n        }\n    };\n    return MapBrowserEvent;\n}(MapEvent));\nexport default MapBrowserEvent;\n//# sourceMappingURL=MapBrowserEvent.js.map"]},"metadata":{},"sourceType":"module"}