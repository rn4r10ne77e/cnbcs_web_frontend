{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\nvar TileQueue = /** @class */function (_super) {\n  __extends(TileQueue, _super);\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  function TileQueue(tilePriorityFunction, tileChangeCallback) {\n    var _this = _super.call(this,\n    /**\n     * @param {Array} element Element.\n     * @return {number} Priority.\n     */\n    function (element) {\n      return tilePriorityFunction.apply(null, element);\n    },\n    /**\n     * @param {Array} element Element.\n     * @return {string} Key.\n     */\n    function (element) {\n      return /** @type {import(\"./Tile.js\").default} */element[0].getKey();\n    }) || this;\n    /** @private */\n    _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    _this.tileChangeCallback_ = tileChangeCallback;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.tilesLoading_ = 0;\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    _this.tilesLoadingKeys_ = {};\n    return _this;\n  }\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  TileQueue.prototype.enqueue = function (element) {\n    var added = _super.prototype.enqueue.call(this, element);\n    if (added) {\n      var tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  };\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  TileQueue.prototype.getTilesLoading = function () {\n    return this.tilesLoading_;\n  };\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  TileQueue.prototype.handleTileChange = function (event) {\n    var tile = /** @type {import(\"./Tile.js\").default} */event.target;\n    var state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {\n      tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      var tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  };\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {\n    var newLoads = 0;\n    var state, tile, tileKey;\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n      tile = /** @type {import(\"./Tile.js\").default} */this.dequeue()[0];\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  };\n  return TileQueue;\n}(PriorityQueue);\nexport default TileQueue;\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  var center = frameState.viewState.center;\n  var deltaX = tileCenter[0] - center[0];\n  var deltaY = tileCenter[1] - center[1];\n  return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}","map":{"version":3,"sources":["src/TileQueue.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\nvar TileQueue = /** @class */ (function (_super) {\n    __extends(TileQueue, _super);\n    /**\n     * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n     * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n     */\n    function TileQueue(tilePriorityFunction, tileChangeCallback) {\n        var _this = _super.call(this, \n        /**\n         * @param {Array} element Element.\n         * @return {number} Priority.\n         */\n        function (element) {\n            return tilePriorityFunction.apply(null, element);\n        }, \n        /**\n         * @param {Array} element Element.\n         * @return {string} Key.\n         */\n        function (element) {\n            return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n        }) || this;\n        /** @private */\n        _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);\n        /**\n         * @private\n         * @type {function(): ?}\n         */\n        _this.tileChangeCallback_ = tileChangeCallback;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.tilesLoading_ = 0;\n        /**\n         * @private\n         * @type {!Object<string,boolean>}\n         */\n        _this.tilesLoadingKeys_ = {};\n        return _this;\n    }\n    /**\n     * @param {Array} element Element.\n     * @return {boolean} The element was added to the queue.\n     */\n    TileQueue.prototype.enqueue = function (element) {\n        var added = _super.prototype.enqueue.call(this, element);\n        if (added) {\n            var tile = element[0];\n            tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n        }\n        return added;\n    };\n    /**\n     * @return {number} Number of tiles loading.\n     */\n    TileQueue.prototype.getTilesLoading = function () {\n        return this.tilesLoading_;\n    };\n    /**\n     * @param {import(\"./events/Event.js\").default} event Event.\n     * @protected\n     */\n    TileQueue.prototype.handleTileChange = function (event) {\n        var tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n        var state = tile.getState();\n        if (state === TileState.LOADED ||\n            state === TileState.ERROR ||\n            state === TileState.EMPTY) {\n            tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n            var tileKey = tile.getKey();\n            if (tileKey in this.tilesLoadingKeys_) {\n                delete this.tilesLoadingKeys_[tileKey];\n                --this.tilesLoading_;\n            }\n            this.tileChangeCallback_();\n        }\n    };\n    /**\n     * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n     * @param {number} maxNewLoads Maximum number of new tiles to load.\n     */\n    TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {\n        var newLoads = 0;\n        var state, tile, tileKey;\n        while (this.tilesLoading_ < maxTotalLoading &&\n            newLoads < maxNewLoads &&\n            this.getCount() > 0) {\n            tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n            tileKey = tile.getKey();\n            state = tile.getState();\n            if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n                this.tilesLoadingKeys_[tileKey] = true;\n                ++this.tilesLoading_;\n                ++newLoads;\n                tile.load();\n            }\n        }\n    };\n    return TileQueue;\n}(PriorityQueue));\nexport default TileQueue;\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n        return DROP;\n    }\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n        return DROP;\n    }\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels between\n    // the center of the tile and the center of the viewport.  The factor of 65536\n    // means that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    var center = frameState.viewState.center;\n    var deltaX = tileCenter[0] - center[0];\n    var deltaY = tileCenter[1] - center[1];\n    return (65536 * Math.log(tileResolution) +\n        Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution);\n}\n//# sourceMappingURL=TileQueue.js.map"]},"metadata":{},"sourceType":"module"}