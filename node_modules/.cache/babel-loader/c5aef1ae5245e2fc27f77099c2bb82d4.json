{"ast":null,"code":"/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = /** @class */function () {\n  /**\n   * @param {Options} options Options.\n   */\n  function ImageStyle(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n    /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  ImageStyle.prototype.clone = function () {\n    var scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n  };\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  ImageStyle.prototype.getOpacity = function () {\n    return this.opacity_;\n  };\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  ImageStyle.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  ImageStyle.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  ImageStyle.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  ImageStyle.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  ImageStyle.prototype.getDisplacement = function () {\n    return this.displacement_;\n  };\n  /**\n   * Get the declutter mode of the shape\n   * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\n   * @api\n   */\n  ImageStyle.prototype.getDeclutterMode = function () {\n    return this.declutterMode_;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  ImageStyle.prototype.getAnchor = function () {\n    return abstract();\n  };\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  ImageStyle.prototype.getImage = function (pixelRatio) {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  ImageStyle.prototype.getHitDetectionImage = function () {\n    return abstract();\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  ImageStyle.prototype.getPixelRatio = function (pixelRatio) {\n    return 1;\n  };\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  ImageStyle.prototype.getImageState = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  ImageStyle.prototype.getImageSize = function () {\n    return abstract();\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  ImageStyle.prototype.getOrigin = function () {\n    return abstract();\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  ImageStyle.prototype.getSize = function () {\n    return abstract();\n  };\n  /**\n   * Set the displacement.\n   *\n   * @param {Array<number>} displacement Displacement.\n   * @api\n   */\n  ImageStyle.prototype.setDisplacement = function (displacement) {\n    this.displacement_ = displacement;\n  };\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  ImageStyle.prototype.setOpacity = function (opacity) {\n    this.opacity_ = opacity;\n  };\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  ImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  ImageStyle.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  ImageStyle.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  ImageStyle.prototype.listenImageChange = function (listener) {\n    abstract();\n  };\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  ImageStyle.prototype.load = function () {\n    abstract();\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  ImageStyle.prototype.unlistenImageChange = function (listener) {\n    abstract();\n  };\n  return ImageStyle;\n}();\nexport default ImageStyle;","map":{"version":3,"sources":["../src/style/Image.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = /** @class */ (function () {\n    /**\n     * @param {Options} options Options.\n     */\n    function ImageStyle(options) {\n        /**\n         * @private\n         * @type {number}\n         */\n        this.opacity_ = options.opacity;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        this.rotateWithView_ = options.rotateWithView;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.rotation_ = options.rotation;\n        /**\n         * @private\n         * @type {number|import(\"../size.js\").Size}\n         */\n        this.scale_ = options.scale;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        this.scaleArray_ = toSize(options.scale);\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        this.displacement_ = options.displacement;\n        /**\n         * @private\n         * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n         */\n        this.declutterMode_ = options.declutterMode;\n    }\n    /**\n     * Clones the style.\n     * @return {ImageStyle} The cloned style.\n     * @api\n     */\n    ImageStyle.prototype.clone = function () {\n        var scale = this.getScale();\n        return new ImageStyle({\n            opacity: this.getOpacity(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode(),\n        });\n    };\n    /**\n     * Get the symbolizer opacity.\n     * @return {number} Opacity.\n     * @api\n     */\n    ImageStyle.prototype.getOpacity = function () {\n        return this.opacity_;\n    };\n    /**\n     * Determine whether the symbolizer rotates with the map.\n     * @return {boolean} Rotate with map.\n     * @api\n     */\n    ImageStyle.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Get the symoblizer rotation.\n     * @return {number} Rotation.\n     * @api\n     */\n    ImageStyle.prototype.getRotation = function () {\n        return this.rotation_;\n    };\n    /**\n     * Get the symbolizer scale.\n     * @return {number|import(\"../size.js\").Size} Scale.\n     * @api\n     */\n    ImageStyle.prototype.getScale = function () {\n        return this.scale_;\n    };\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n    ImageStyle.prototype.getScaleArray = function () {\n        return this.scaleArray_;\n    };\n    /**\n     * Get the displacement of the shape\n     * @return {Array<number>} Shape's center displacement\n     * @api\n     */\n    ImageStyle.prototype.getDisplacement = function () {\n        return this.displacement_;\n    };\n    /**\n     * Get the declutter mode of the shape\n     * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\n     * @api\n     */\n    ImageStyle.prototype.getDeclutterMode = function () {\n        return this.declutterMode_;\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @abstract\n     * @return {Array<number>} Anchor.\n     */\n    ImageStyle.prototype.getAnchor = function () {\n        return abstract();\n    };\n    /**\n     * Get the image element for the symbolizer.\n     * @abstract\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n    ImageStyle.prototype.getImage = function (pixelRatio) {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n    ImageStyle.prototype.getHitDetectionImage = function () {\n        return abstract();\n    };\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n    ImageStyle.prototype.getPixelRatio = function (pixelRatio) {\n        return 1;\n    };\n    /**\n     * @abstract\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    ImageStyle.prototype.getImageState = function () {\n        return abstract();\n    };\n    /**\n     * @abstract\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    ImageStyle.prototype.getImageSize = function () {\n        return abstract();\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @abstract\n     * @return {Array<number>} Origin.\n     */\n    ImageStyle.prototype.getOrigin = function () {\n        return abstract();\n    };\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @abstract\n     * @return {import(\"../size.js\").Size} Size.\n     */\n    ImageStyle.prototype.getSize = function () {\n        return abstract();\n    };\n    /**\n     * Set the displacement.\n     *\n     * @param {Array<number>} displacement Displacement.\n     * @api\n     */\n    ImageStyle.prototype.setDisplacement = function (displacement) {\n        this.displacement_ = displacement;\n    };\n    /**\n     * Set the opacity.\n     *\n     * @param {number} opacity Opacity.\n     * @api\n     */\n    ImageStyle.prototype.setOpacity = function (opacity) {\n        this.opacity_ = opacity;\n    };\n    /**\n     * Set whether to rotate the style with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n    ImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    };\n    /**\n     * Set the rotation.\n     *\n     * @param {number} rotation Rotation.\n     * @api\n     */\n    ImageStyle.prototype.setRotation = function (rotation) {\n        this.rotation_ = rotation;\n    };\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @api\n     */\n    ImageStyle.prototype.setScale = function (scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = toSize(scale);\n    };\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    ImageStyle.prototype.listenImageChange = function (listener) {\n        abstract();\n    };\n    /**\n     * Load not yet loaded URI.\n     * @abstract\n     */\n    ImageStyle.prototype.load = function () {\n        abstract();\n    };\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    ImageStyle.prototype.unlistenImageChange = function (listener) {\n        abstract();\n    };\n    return ImageStyle;\n}());\nexport default ImageStyle;\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}