{"ast":null,"code":"/**\n * @module ol/renderer/vector\n */\nimport ImageState from '../ImageState.js';\nimport { getUid } from '../util.js';\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nvar SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nvar GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry\n};\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  var tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n  return SIMPLIFY_TOLERANCE * resolution / pixelRatio;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    var circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n  var textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {\n  var loading = false;\n  var imageStyle = style.getImage();\n  if (imageStyle) {\n    var imageState = imageStyle.getImageState();\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      imageStyle.unlistenImageChange(listener);\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n      imageStyle.listenImageChange(listener);\n      loading = true;\n    }\n  }\n  renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);\n  return loading;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {\n  var geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);\n  var renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == 'GeometryCollection') {\n    var geometries = /** @type {import(\"../geom/GeometryCollection.js\").default} */geometry.getGeometries();\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n    return;\n  }\n  var replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n  replay.drawCustom(/** @type {import(\"../geom/SimpleGeometry.js\").default} */geometry, feature, style.getRenderer(), style.getHitDetectionRenderer());\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var geometries = geometry.getGeometriesArray();\n  var i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n  var textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n  var textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n  var textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var imageStyle = style.getImage();\n  var textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  var declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    var imageBuilderGroup = builderGroup;\n    if (opt_declutterBuilderGroup) {\n      var declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== 'none') {\n        imageBuilderGroup = opt_declutterBuilderGroup;\n        if (declutterMode === 'obstacle') {\n          // draw in non-declutter group:\n          var imageReplay_1 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n          imageReplay_1.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay_1.drawPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    var textBuilderGroup = builderGroup;\n    if (opt_declutterBuilderGroup) {\n      textBuilderGroup = opt_declutterBuilderGroup;\n    }\n    var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var imageStyle = style.getImage();\n  var textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  var declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    var imageBuilderGroup = builderGroup;\n    if (opt_declutterBuilderGroup) {\n      var declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== 'none') {\n        imageBuilderGroup = opt_declutterBuilderGroup;\n        if (declutterMode === 'obstacle') {\n          // draw in non-declutter group:\n          var imageReplay_2 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n          imageReplay_2.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay_2.drawMultiPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    var textBuilderGroup = builderGroup;\n    if (opt_declutterBuilderGroup) {\n      textBuilderGroup = opt_declutterBuilderGroup;\n    }\n    var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n  var fillStyle = style.getFill();\n  var strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n  var textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}","map":{"version":3,"sources":["../src/renderer/vector.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/renderer/vector\n */\nimport ImageState from '../ImageState.js';\nimport { getUid } from '../util.js';\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nvar SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nvar GEOMETRY_RENDERERS = {\n    'Point': renderPointGeometry,\n    'LineString': renderLineStringGeometry,\n    'Polygon': renderPolygonGeometry,\n    'MultiPoint': renderMultiPointGeometry,\n    'MultiLineString': renderMultiLineStringGeometry,\n    'MultiPolygon': renderMultiPolygonGeometry,\n    'GeometryCollection': renderGeometryCollectionGeometry,\n    'Circle': renderCircleGeometry,\n};\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n    return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n    var tolerance = getTolerance(resolution, pixelRatio);\n    return tolerance * tolerance;\n}\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n    return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        circleReplay.drawCircle(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(replayGroup, feature, style, squaredTolerance, listener, opt_transform, opt_declutterBuilderGroup) {\n    var loading = false;\n    var imageStyle = style.getImage();\n    if (imageStyle) {\n        var imageState = imageStyle.getImageState();\n        if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n            imageStyle.unlistenImageChange(listener);\n        }\n        else {\n            if (imageState == ImageState.IDLE) {\n                imageStyle.load();\n            }\n            imageStyle.listenImageChange(listener);\n            loading = true;\n        }\n    }\n    renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup);\n    return loading;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(replayGroup, feature, style, squaredTolerance, opt_transform, opt_declutterBuilderGroup) {\n    var geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n        return;\n    }\n    var simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, opt_transform);\n    var renderer = style.getRenderer();\n    if (renderer) {\n        renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n    }\n    else {\n        var geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n    if (geometry.getType() == 'GeometryCollection') {\n        var geometries = \n        /** @type {import(\"../geom/GeometryCollection.js\").default} */ (geometry).getGeometries();\n        for (var i = 0, ii = geometries.length; i < ii; ++i) {\n            renderGeometry(replayGroup, geometries[i], style, feature);\n        }\n        return;\n    }\n    var replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n    replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry), feature, style.getRenderer(), style.getHitDetectionRenderer());\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var geometries = geometry.getGeometriesArray();\n    var i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n        var geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n        geometryRenderer(replayGroup, geometries[i], style, feature, opt_declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        var lineStringReplay = builderGroup.getBuilder(style.getZIndex(), 'LineString');\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawMultiLineString(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (strokeStyle || fillStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawMultiPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            var declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== 'none') {\n                imageBuilderGroup = opt_declutterBuilderGroup;\n                if (declutterMode === 'obstacle') {\n                    // draw in non-declutter group:\n                    var imageReplay_1 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n                    imageReplay_1.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay_1.drawPoint(geometry, feature);\n                }\n                else if (textStyle && textStyle.getText()) {\n                    declutterImageWithText = {};\n                }\n            }\n        }\n        var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            textBuilderGroup = opt_declutterBuilderGroup;\n        }\n        var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var imageStyle = style.getImage();\n    var textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n    var declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != ImageState.LOADED) {\n            return;\n        }\n        var imageBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            var declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== 'none') {\n                imageBuilderGroup = opt_declutterBuilderGroup;\n                if (declutterMode === 'obstacle') {\n                    // draw in non-declutter group:\n                    var imageReplay_2 = builderGroup.getBuilder(style.getZIndex(), 'Image');\n                    imageReplay_2.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay_2.drawMultiPoint(geometry, feature);\n                }\n                else if (textStyle && textStyle.getText()) {\n                    declutterImageWithText = {};\n                }\n            }\n        }\n        var imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), 'Image');\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawMultiPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        var textBuilderGroup = builderGroup;\n        if (opt_declutterBuilderGroup) {\n            textBuilderGroup = opt_declutterBuilderGroup;\n        }\n        var textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(builderGroup, geometry, style, feature, opt_declutterBuilderGroup) {\n    var fillStyle = style.getFill();\n    var strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        var polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawPolygon(geometry, feature);\n    }\n    var textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        var textReplay = (opt_declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), 'Text');\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n//# sourceMappingURL=vector.js.map"]},"metadata":{},"sourceType":"module"}