{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector~VectorSource} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n  var xhr = new XMLHttpRequest();\n  xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n  if (format.getType() == 'arraybuffer') {\n    xhr.responseType = 'arraybuffer';\n  }\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n      var type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n      var source = void 0;\n      if (type == 'json' || type == 'text') {\n        source = xhr.responseText;\n      } else if (type == 'xml') {\n        source = xhr.responseXML;\n        if (!source) {\n          source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n        }\n      } else if (type == 'arraybuffer') {\n        source = /** @type {ArrayBuffer} */xhr.response;\n      }\n      if (source) {\n        success(/** @type {Array<import(\"./Feature.js\").default>} */\n        format.readFeatures(source, {\n          extent: extent,\n          featureProjection: projection\n        }), format.readProjection(source));\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n  xhr.onerror = failure;\n  xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   * @this {import(\"./source/Vector\").default}\n   */\n  return function (extent, resolution, projection, success, failure) {\n    var source = /** @type {import(\"./source/Vector\").default} */this;\n    loadFeaturesXhr(url, format, extent, resolution, projection,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     */\n    function (features, dataProjection) {\n      source.addFeatures(features);\n      if (success !== undefined) {\n        success(features);\n      }\n    }, /* FIXME handle error */failure ? failure : VOID);\n  };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}","map":{"version":3,"sources":["src/featureloader.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,SAAQ,IAAI,QAAO,gBAAgB;AAEnC;;;;AAIG;AACH,IAAI,eAAe,GAAG,KAAK;AAE3B;;;;;;;;;;;;;;;;;;;;;AAqBG;AAEH;;;;;;;;;;AAUG;AAEH;;;;;;;;;;AAUG;AACH,OAAM,SAAU,eAAe,CAC7B,GAAG,EACH,MAAM,EACN,MAAM,EACN,UAAU,EACV,UAAU,EACV,OAAO,EACP,OAAO,EAAA;EAEP,IAAM,GAAG,GAAG,IAAI,cAAc,CAAA,CAAE;EAChC,GAAG,CAAC,IAAI,CACN,KAAK,EACL,OAAO,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,GAAG,GAAG,EACrE,IAAI,CACL;EACD,IAAI,MAAM,CAAC,OAAO,CAAA,CAAE,IAAI,aAAa,EAAE;IACrC,GAAG,CAAC,YAAY,GAAG,aAAa;EACjC;EACD,GAAG,CAAC,eAAe,GAAG,eAAe;EACrC;;;AAGG;EACH,GAAG,CAAC,MAAM,GAAG,UAAU,KAAK,EAAA;IAC1B;IACA,IAAI,CAAC,GAAG,CAAC,MAAM,IAAK,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAI,EAAE;MAC1D,IAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAA,CAAE;MAC7B;MACA,IAAI,MAAM,GAAA,KAAA,CAAA;MACV,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,EAAE;QACpC,MAAM,GAAG,GAAG,CAAC,YAAY;OAC1B,MAAM,IAAI,IAAI,IAAI,KAAK,EAAE;QACxB,MAAM,GAAG,GAAG,CAAC,WAAW;QACxB,IAAI,CAAC,MAAM,EAAE;UACX,MAAM,GAAG,IAAI,SAAS,CAAA,CAAE,CAAC,eAAe,CACtC,GAAG,CAAC,YAAY,EAChB,iBAAiB,CAClB;QACF;OACF,MAAM,IAAI,IAAI,IAAI,aAAa,EAAE;QAChC,MAAM,GAAG,0BAA4B,GAAG,CAAC,QAAS;MACnD;MACD,IAAI,MAAM,EAAE;QACV,OAAO,CACL;QAEE,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE;UAC1B,MAAM,EAAE,MAAM;UACd,iBAAiB,EAAE;SACpB,CAAC,EAEJ,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAC9B;OACF,MAAM;QACL,OAAO,CAAA,CAAE;MACV;KACF,MAAM;MACL,OAAO,CAAA,CAAE;IACV;EACH,CAAC;EACD;;AAEG;EACH,GAAG,CAAC,OAAO,GAAG,OAAO;EACrB,GAAG,CAAC,IAAI,CAAA,CAAE;AACZ;AAEA;;;;;;;;AAQG;AACH,OAAM,SAAU,GAAG,CAAC,GAAG,EAAE,MAAM,EAAA;EAC7B;;;;;;;;;AASG;EACH,OAAO,UAAU,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAA;IAC/D,IAAM,MAAM,GAAG,gDAAkD,IAAK;IACtE,eAAe,CACb,GAAG,EACH,MAAM,EACN,MAAM,EACN,UAAU,EACV,UAAU;IACV;;;;AAIG;IACH,UAAU,QAAQ,EAAE,cAAc,EAAA;MAChC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;MAC5B,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,OAAO,CAAC,QAAQ,CAAC;MAClB;IACH,CAAC,EACD,wBAAyB,OAAO,GAAG,OAAO,GAAG,IAAI,CAClD;EACH,CAAC;AACH;AAEA;;;;;;AAMG;AACH,OAAM,SAAU,kBAAkB,CAAC,kBAAkB,EAAA;EACnD,eAAe,GAAG,kBAAkB;AACtC","sourceRoot":"","sourcesContent":["/**\n * @module ol/featureloader\n */\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector~VectorSource} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(url, format, extent, resolution, projection, success, failure) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n    if (format.getType() == 'arraybuffer') {\n        xhr.responseType = 'arraybuffer';\n    }\n    xhr.withCredentials = withCredentials;\n    /**\n     * @param {Event} event Event.\n     * @private\n     */\n    xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n            var type = format.getType();\n            /** @type {Document|Node|Object|string|undefined} */\n            var source = void 0;\n            if (type == 'json' || type == 'text') {\n                source = xhr.responseText;\n            }\n            else if (type == 'xml') {\n                source = xhr.responseXML;\n                if (!source) {\n                    source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n                }\n            }\n            else if (type == 'arraybuffer') {\n                source = /** @type {ArrayBuffer} */ (xhr.response);\n            }\n            if (source) {\n                success(\n                /** @type {Array<import(\"./Feature.js\").default>} */\n                (format.readFeatures(source, {\n                    extent: extent,\n                    featureProjection: projection,\n                })), format.readProjection(source));\n            }\n            else {\n                failure();\n            }\n        }\n        else {\n            failure();\n        }\n    };\n    /**\n     * @private\n     */\n    xhr.onerror = failure;\n    xhr.send();\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n     *      Function called when loading succeeded.\n     * @param {function(): void} [failure] Failure\n     *      Function called when loading failed.\n     * @this {import(\"./source/Vector\").default}\n     */\n    return function (extent, resolution, projection, success, failure) {\n        var source = /** @type {import(\"./source/Vector\").default} */ (this);\n        loadFeaturesXhr(url, format, extent, resolution, projection, \n        /**\n         * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n         * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n         * projection.\n         */\n        function (features, dataProjection) {\n            source.addFeatures(features);\n            if (success !== undefined) {\n                success(features);\n            }\n        }, \n        /* FIXME handle error */ failure ? failure : VOID);\n    };\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n    withCredentials = xhrWithCredentials;\n}\n//# sourceMappingURL=featureloader.js.map"]},"metadata":{},"sourceType":"module"}