{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Feature\n */\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { assert } from './asserts.js';\nimport { listen, unlistenByKey } from './events.js';\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n/***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */\nvar Feature = /** @class */function (_super) {\n  __extends(Feature, _super);\n  /**\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [opt_geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  function Feature(opt_geometryOrProperties) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {FeatureOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    _this.id_ = undefined;\n    /**\n     * @type {string}\n     * @private\n     */\n    _this.geometryName_ = 'geometry';\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    _this.style_ = null;\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    _this.styleFunction_ = undefined;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.geometryChangeKey_ = null;\n    _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);\n    if (opt_geometryOrProperties) {\n      if (typeof (/** @type {?} */opt_geometryOrProperties.getSimplifiedGeometry) === 'function') {\n        var geometry = /** @type {Geometry} */opt_geometryOrProperties;\n        _this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        var properties = opt_geometryOrProperties;\n        _this.setProperties(properties);\n      }\n    }\n    return _this;\n  }\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature<Geometry>} The clone.\n   * @api\n   */\n  Feature.prototype.clone = function () {\n    var clone = /** @type {Feature<Geometry>} */new Feature(this.hasProperties() ? this.getProperties() : null);\n    clone.setGeometryName(this.getGeometryName());\n    var geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(/** @type {Geometry} */geometry.clone());\n    }\n    var style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  };\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  Feature.prototype.getGeometry = function () {\n    return /** @type {Geometry|undefined} */this.get(this.geometryName_);\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Feature.prototype.getId = function () {\n    return this.id_;\n  };\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  Feature.prototype.getGeometryName = function () {\n    return this.geometryName_;\n  };\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n   * @api\n   */\n  Feature.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  Feature.prototype.getStyleFunction = function () {\n    return this.styleFunction_;\n  };\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  Feature.prototype.handleGeometryChanged_ = function () {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    var geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n    }\n    this.changed();\n  };\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  Feature.prototype.setGeometry = function (geometry) {\n    this.set(this.geometryName_, geometry);\n  };\n  /**\n   * Set the style for the feature to override the layer style.  This can be a\n   * single style object, an array of styles, or a function that takes a\n   * resolution and returns an array of styles. To unset the feature style, call\n   * `setStyle()` without arguments or a falsey value.\n   * @param {import(\"./style/Style.js\").StyleLike} [opt_style] Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  Feature.prototype.setStyle = function (opt_style) {\n    this.style_ = opt_style;\n    this.styleFunction_ = !opt_style ? undefined : createStyleFunction(opt_style);\n    this.changed();\n  };\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  Feature.prototype.setId = function (id) {\n    this.id_ = id;\n    this.changed();\n  };\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  Feature.prototype.setGeometryName = function (name) {\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.geometryName_ = name;\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.handleGeometryChanged_();\n  };\n  return Feature;\n}(BaseObject);\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  } else {\n    /**\n     * @type {Array<import(\"./style/Style.js\").default>}\n     */\n    var styles_1;\n    if (Array.isArray(obj)) {\n      styles_1 = obj;\n    } else {\n      assert(typeof (/** @type {?} */obj.getZIndex) === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n      var style = /** @type {import(\"./style/Style.js\").default} */obj;\n      styles_1 = [style];\n    }\n    return function () {\n      return styles_1;\n    };\n  }\n}\nexport default Feature;","map":{"version":3,"sources":["src/Feature.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Feature\n */\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { assert } from './asserts.js';\nimport { listen, unlistenByKey } from './events.js';\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n/***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature';\n * import Polygon from 'ol/geom/Polygon';\n * import Point from 'ol/geom/Point';\n *\n * var feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon'\n * });\n *\n * // get the polygon geometry\n * var poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * var point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */\nvar Feature = /** @class */ (function (_super) {\n    __extends(Feature, _super);\n    /**\n     * @param {Geometry|ObjectWithGeometry<Geometry>} [opt_geometryOrProperties]\n     *     You may pass a Geometry object directly, or an object literal containing\n     *     properties. If you pass an object literal, you may include a Geometry\n     *     associated with a `geometry` key.\n     */\n    function Feature(opt_geometryOrProperties) {\n        var _this = _super.call(this) || this;\n        /***\n         * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {FeatureOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {number|string|undefined}\n         */\n        _this.id_ = undefined;\n        /**\n         * @type {string}\n         * @private\n         */\n        _this.geometryName_ = 'geometry';\n        /**\n         * User provided style.\n         * @private\n         * @type {import(\"./style/Style.js\").StyleLike}\n         */\n        _this.style_ = null;\n        /**\n         * @private\n         * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n         */\n        _this.styleFunction_ = undefined;\n        /**\n         * @private\n         * @type {?import(\"./events.js\").EventsKey}\n         */\n        _this.geometryChangeKey_ = null;\n        _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);\n        if (opt_geometryOrProperties) {\n            if (typeof (\n            /** @type {?} */ (opt_geometryOrProperties).getSimplifiedGeometry) === 'function') {\n                var geometry = /** @type {Geometry} */ (opt_geometryOrProperties);\n                _this.setGeometry(geometry);\n            }\n            else {\n                /** @type {Object<string, *>} */\n                var properties = opt_geometryOrProperties;\n                _this.setProperties(properties);\n            }\n        }\n        return _this;\n    }\n    /**\n     * Clone this feature. If the original feature has a geometry it\n     * is also cloned. The feature id is not set in the clone.\n     * @return {Feature<Geometry>} The clone.\n     * @api\n     */\n    Feature.prototype.clone = function () {\n        var clone = /** @type {Feature<Geometry>} */ (new Feature(this.hasProperties() ? this.getProperties() : null));\n        clone.setGeometryName(this.getGeometryName());\n        var geometry = this.getGeometry();\n        if (geometry) {\n            clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));\n        }\n        var style = this.getStyle();\n        if (style) {\n            clone.setStyle(style);\n        }\n        return clone;\n    };\n    /**\n     * Get the feature's default geometry.  A feature may have any number of named\n     * geometries.  The \"default\" geometry (the one that is rendered by default) is\n     * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n     * @return {Geometry|undefined} The default geometry for the feature.\n     * @api\n     * @observable\n     */\n    Feature.prototype.getGeometry = function () {\n        return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\n    };\n    /**\n     * Get the feature identifier.  This is a stable identifier for the feature and\n     * is either set when reading data from a remote source or set explicitly by\n     * calling {@link module:ol/Feature~Feature#setId}.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n    Feature.prototype.getId = function () {\n        return this.id_;\n    };\n    /**\n     * Get the name of the feature's default geometry.  By default, the default\n     * geometry is named `geometry`.\n     * @return {string} Get the property name associated with the default geometry\n     *     for this feature.\n     * @api\n     */\n    Feature.prototype.getGeometryName = function () {\n        return this.geometryName_;\n    };\n    /**\n     * Get the feature's style. Will return what was provided to the\n     * {@link module:ol/Feature~Feature#setStyle} method.\n     * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n     * @api\n     */\n    Feature.prototype.getStyle = function () {\n        return this.style_;\n    };\n    /**\n     * Get the feature's style function.\n     * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n     * representing the current style of this feature.\n     * @api\n     */\n    Feature.prototype.getStyleFunction = function () {\n        return this.styleFunction_;\n    };\n    /**\n     * @private\n     */\n    Feature.prototype.handleGeometryChange_ = function () {\n        this.changed();\n    };\n    /**\n     * @private\n     */\n    Feature.prototype.handleGeometryChanged_ = function () {\n        if (this.geometryChangeKey_) {\n            unlistenByKey(this.geometryChangeKey_);\n            this.geometryChangeKey_ = null;\n        }\n        var geometry = this.getGeometry();\n        if (geometry) {\n            this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n        }\n        this.changed();\n    };\n    /**\n     * Set the default geometry for the feature.  This will update the property\n     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n     * @param {Geometry|undefined} geometry The new geometry.\n     * @api\n     * @observable\n     */\n    Feature.prototype.setGeometry = function (geometry) {\n        this.set(this.geometryName_, geometry);\n    };\n    /**\n     * Set the style for the feature to override the layer style.  This can be a\n     * single style object, an array of styles, or a function that takes a\n     * resolution and returns an array of styles. To unset the feature style, call\n     * `setStyle()` without arguments or a falsey value.\n     * @param {import(\"./style/Style.js\").StyleLike} [opt_style] Style for this feature.\n     * @api\n     * @fires module:ol/events/Event~BaseEvent#event:change\n     */\n    Feature.prototype.setStyle = function (opt_style) {\n        this.style_ = opt_style;\n        this.styleFunction_ = !opt_style\n            ? undefined\n            : createStyleFunction(opt_style);\n        this.changed();\n    };\n    /**\n     * Set the feature id.  The feature id is considered stable and may be used when\n     * requesting features or comparing identifiers returned from a remote source.\n     * The feature id can be used with the\n     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n     * @param {number|string|undefined} id The feature id.\n     * @api\n     * @fires module:ol/events/Event~BaseEvent#event:change\n     */\n    Feature.prototype.setId = function (id) {\n        this.id_ = id;\n        this.changed();\n    };\n    /**\n     * Set the property name to be used when getting the feature's default geometry.\n     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n     * this name will be returned.\n     * @param {string} name The property name of the default geometry.\n     * @api\n     */\n    Feature.prototype.setGeometryName = function (name) {\n        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.geometryName_ = name;\n        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.handleGeometryChanged_();\n    };\n    return Feature;\n}(BaseObject));\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n    if (typeof obj === 'function') {\n        return obj;\n    }\n    else {\n        /**\n         * @type {Array<import(\"./style/Style.js\").default>}\n         */\n        var styles_1;\n        if (Array.isArray(obj)) {\n            styles_1 = obj;\n        }\n        else {\n            assert(typeof ( /** @type {?} */(obj).getZIndex) === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n            var style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n            styles_1 = [style];\n        }\n        return function () {\n            return styles_1;\n        };\n    }\n}\nexport default Feature;\n//# sourceMappingURL=Feature.js.map"]},"metadata":{},"sourceType":"module"}