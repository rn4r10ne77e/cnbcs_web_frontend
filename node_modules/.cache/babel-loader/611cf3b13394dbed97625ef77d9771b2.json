{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /** @class */function (_super) {\n  __extends(PinchRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function PinchRotate(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotating_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.rotationDelta_ = 0.0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    var rotationDelta = 0.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n    // angle between touches\n    var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n    if (this.lastAngle_ !== undefined) {\n      var delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchRotate;\n}(PointerInteraction);\nexport default PinchRotate;","map":{"version":3,"sources":["../src/interaction/PinchRotate.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers, } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /** @class */ (function (_super) {\n    __extends(PinchRotate, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function PinchRotate(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n        if (!pointerOptions.stopDown) {\n            pointerOptions.stopDown = FALSE;\n        }\n        _this = _super.call(this, pointerOptions) || this;\n        /**\n         * @private\n         * @type {import(\"../coordinate.js\").Coordinate}\n         */\n        _this.anchor_ = null;\n        /**\n         * @private\n         * @type {number|undefined}\n         */\n        _this.lastAngle_ = undefined;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotating_ = false;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.rotationDelta_ = 0.0;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.duration_ = options.duration !== undefined ? options.duration : 250;\n        return _this;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     */\n    PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n        var rotationDelta = 0.0;\n        var touch0 = this.targetPointers[0];\n        var touch1 = this.targetPointers[1];\n        // angle between touches\n        var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n        if (this.lastAngle_ !== undefined) {\n            var delta = angle - this.lastAngle_;\n            this.rotationDelta_ += delta;\n            if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n                this.rotating_ = true;\n            }\n            rotationDelta = delta;\n        }\n        this.lastAngle_ = angle;\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        if (view.getConstraints().rotation === disable) {\n            return;\n        }\n        // rotate anchor point.\n        // FIXME: should be the intersection point between the lines:\n        //     touch0,touch1 and previousTouch0,previousTouch1\n        var viewportPosition = map.getViewport().getBoundingClientRect();\n        var centroid = centroidFromPointers(this.targetPointers);\n        centroid[0] -= viewportPosition.left;\n        centroid[1] -= viewportPosition.top;\n        this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n        // rotate\n        if (this.rotating_) {\n            map.render();\n            view.adjustRotationInternal(rotationDelta, this.anchor_);\n        }\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n        if (this.targetPointers.length < 2) {\n            var map = mapBrowserEvent.map;\n            var view = map.getView();\n            view.endInteraction(this.duration_);\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n    PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n        if (this.targetPointers.length >= 2) {\n            var map = mapBrowserEvent.map;\n            this.anchor_ = null;\n            this.lastAngle_ = undefined;\n            this.rotating_ = false;\n            this.rotationDelta_ = 0.0;\n            if (!this.handlingDownUpSequence) {\n                map.getView().beginInteraction();\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    return PinchRotate;\n}(PointerInteraction));\nexport default PinchRotate;\n//# sourceMappingURL=PinchRotate.js.map"]},"metadata":{},"sourceType":"module"}