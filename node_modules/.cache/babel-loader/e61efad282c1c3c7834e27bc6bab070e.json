{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n  var canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n    _this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.pixelContext_ = null;\n    /**\n     * @protected\n     * @type {import(\"../../PluggableMap.js\").FrameState|null}\n     */\n    _this.frameState = null;\n    return _this;\n  }\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  };\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n    var layer = this.getLayer();\n    var background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  };\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n    if (target && target.className === layerClassName && (!opt_backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor)))) {\n      var canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (!this.containerReused && opt_backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = opt_backgroundColor;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n    var x = Math.round(renderPixel[0]);\n    var y = Math.round(renderPixel[1]);\n    var pixelContext = this.pixelContext_;\n    if (!pixelContext) {\n      var pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n      return data;\n    }\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  };\n  /**\n   * Clean up.\n   */\n  CanvasLayerRenderer.prototype.disposeInternal = function () {\n    delete this.frameState;\n    _super.prototype.disposeInternal.call(this);\n  };\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"sources":["../../src/renderer/canvas/Layer.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight, } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasLayerRenderer, _super);\n    /**\n     * @param {LayerType} layer Layer.\n     */\n    function CanvasLayerRenderer(layer) {\n        var _this = _super.call(this, layer) || this;\n        /**\n         * @protected\n         * @type {HTMLElement}\n         */\n        _this.container = null;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.renderedResolution;\n        /**\n         * A temporary transform.  The values in this transform should only be used in a\n         * function that sets the values.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.tempTransform = createTransform();\n        /**\n         * The transform for rendered pixels to viewport CSS pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.pixelTransform = createTransform();\n        /**\n         * The transform for viewport CSS pixels to rendered pixels.  This transform must\n         * be set when rendering a frame and may be used by other functions after rendering.\n         * @protected\n         * @type {import(\"../../transform.js\").Transform}\n         */\n        _this.inversePixelTransform = createTransform();\n        /**\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.context = null;\n        /**\n         * @type {boolean}\n         */\n        _this.containerReused = false;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.pixelContext_ = null;\n        /**\n         * @protected\n         * @type {import(\"../../PluggableMap.js\").FrameState|null}\n         */\n        _this.frameState = null;\n        return _this;\n    }\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     * @param {number} col The column index.\n     * @param {number} row The row index.\n     * @return {Uint8ClampedArray|null} The image data.\n     */\n    CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n        if (!pixelContext) {\n            createPixelContext();\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            pixelContext = null;\n            return null;\n        }\n        return data;\n    };\n    /**\n     * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n    CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n        var layer = this.getLayer();\n        var background = layer.getBackground();\n        if (typeof background === 'function') {\n            background = background(frameState.viewState.resolution);\n        }\n        return background || undefined;\n    };\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {string} [opt_backgroundColor] Background color.\n     */\n    CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n        var layerClassName = this.getLayer().getClassName();\n        var container, context;\n        if (target &&\n            target.className === layerClassName &&\n            (!opt_backgroundColor ||\n                (target &&\n                    target.style.backgroundColor &&\n                    equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor))))) {\n            var canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) {\n                context = canvas.getContext('2d');\n            }\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        }\n        else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        }\n        if (!this.container) {\n            container = document.createElement('div');\n            container.className = layerClassName;\n            var style = container.style;\n            style.position = 'absolute';\n            style.width = '100%';\n            style.height = '100%';\n            context = createCanvasContext2D();\n            var canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = 'absolute';\n            style.left = '0';\n            style.transformOrigin = 'top left';\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused &&\n            opt_backgroundColor &&\n            !this.container.style.backgroundColor) {\n            this.container.style.backgroundColor = opt_backgroundColor;\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n        var topLeft = getTopLeft(extent);\n        var topRight = getTopRight(extent);\n        var bottomRight = getBottomRight(extent);\n        var bottomLeft = getBottomLeft(extent);\n        applyTransform(frameState.coordinateToPixelTransform, topLeft);\n        applyTransform(frameState.coordinateToPixelTransform, topRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n        applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n        var inverted = this.inversePixelTransform;\n        applyTransform(inverted, topLeft);\n        applyTransform(inverted, topRight);\n        applyTransform(inverted, bottomRight);\n        applyTransform(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    };\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @private\n     */\n    CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n        var layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event_1);\n        }\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n        this.frameState = frameState;\n        this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    };\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n    CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n        this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    };\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n    CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        var dx1 = width / 2;\n        var dy1 = height / 2;\n        var sx = pixelRatio / resolution;\n        var sy = -sx;\n        var dx2 = -center[0] + offsetX;\n        var dy2 = -center[1];\n        return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    };\n    /**\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n     *    location, null will be returned.  If there is data, but pixel values cannot be\n     *    returned, and empty array will be returned.\n     */\n    CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n        var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n        var context = this.context;\n        var layer = this.getLayer();\n        var layerExtent = layer.getExtent();\n        if (layerExtent) {\n            var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n            /** get only data inside of the layer extent */\n            if (!containsCoordinate(layerExtent, renderCoordinate)) {\n                return null;\n            }\n        }\n        var x = Math.round(renderPixel[0]);\n        var y = Math.round(renderPixel[1]);\n        var pixelContext = this.pixelContext_;\n        if (!pixelContext) {\n            var pixelCanvas = document.createElement('canvas');\n            pixelCanvas.width = 1;\n            pixelCanvas.height = 1;\n            pixelContext = pixelCanvas.getContext('2d');\n            this.pixelContext_ = pixelContext;\n        }\n        pixelContext.clearRect(0, 0, 1, 1);\n        var data;\n        try {\n            pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n            data = pixelContext.getImageData(0, 0, 1, 1).data;\n        }\n        catch (err) {\n            if (err.name === 'SecurityError') {\n                // tainted canvas, we assume there is data at the given pixel (although there might not be)\n                this.pixelContext_ = null;\n                return new Uint8Array();\n            }\n            return data;\n        }\n        if (data[3] === 0) {\n            return null;\n        }\n        return data;\n    };\n    /**\n     * Clean up.\n     */\n    CanvasLayerRenderer.prototype.disposeInternal = function () {\n        delete this.frameState;\n        _super.prototype.disposeInternal.call(this);\n    };\n    return CanvasLayerRenderer;\n}(LayerRenderer));\nexport default CanvasLayerRenderer;\n//# sourceMappingURL=Layer.js.map"]},"metadata":{},"sourceType":"module"}