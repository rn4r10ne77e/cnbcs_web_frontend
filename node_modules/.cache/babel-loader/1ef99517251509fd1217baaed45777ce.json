{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */function (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function FullScreen(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    _this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.button_ = document.createElement('button');\n    _this.button_.title = tipLabel;\n    _this.button_.setAttribute('type', 'button');\n    _this.button_.appendChild(_this.labelNode_);\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    _this.setClassName_(_this.button_, _this.isInFullscreen_);\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n    _this.element.appendChild(_this.button_);\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleFullScreen_ = function () {\n    var map = this.getMap();\n    if (!map) {\n      return;\n    }\n    var doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      var element = void 0;\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n    if (!map) {\n      return;\n    }\n    var wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c, _d;\n    if (fullscreen) {\n      (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n      (_b = element.classList).add.apply(_b, this.activeClassName_);\n    } else {\n      (_c = element.classList).remove.apply(_c, this.activeClassName_);\n      (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n    }\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  FullScreen.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n    _super.prototype.setMap.call(this, map);\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleMapTargetChange_ = function () {\n    var listeners = this.documentListeners_;\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n    var map = this.getMap();\n    if (map) {\n      var doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n      this.handleFullScreenChange_();\n    }\n  };\n  return FullScreen;\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && doc['msFullscreenEnabled'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc['msFullscreenElement'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\nexport default FullScreen;","map":{"version":3,"sources":["../src/control/FullScreen.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = [\n    'fullscreenchange',\n    'webkitfullscreenchange',\n    'MSFullscreenChange',\n];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n    /**\n     * Triggered after the map entered fullscreen.\n     * @event FullScreenEventType#enterfullscreen\n     * @api\n     */\n    ENTERFULLSCREEN: 'enterfullscreen',\n    /**\n     * Triggered after the map leave fullscreen.\n     * @event FullScreenEventType#leavefullscreen\n     * @api\n     */\n    LEAVEFULLSCREEN: 'leavefullscreen',\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */ (function (_super) {\n    __extends(FullScreen, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function FullScreen(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            target: options.target,\n        }) || this;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {FullScreenOnSignature<void>}\n         */\n        _this.un;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.keys_ = options.keys !== undefined ? options.keys : false;\n        /**\n         * @private\n         * @type {HTMLElement|string|undefined}\n         */\n        _this.source_ = options.source;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.isInFullscreen_ = false;\n        /**\n         * @private\n         */\n        _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.cssClassName_ =\n            options.className !== undefined ? options.className : 'ol-full-screen';\n        /**\n         * @private\n         * @type {Array<import(\"../events.js\").EventsKey>}\n         */\n        _this.documentListeners_ = [];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.activeClassName_ =\n            options.activeClassName !== undefined\n                ? options.activeClassName.split(' ')\n                : [_this.cssClassName_ + '-true'];\n        /**\n         * @private\n         * @type {Array<string>}\n         */\n        _this.inactiveClassName_ =\n            options.inactiveClassName !== undefined\n                ? options.inactiveClassName.split(' ')\n                : [_this.cssClassName_ + '-false'];\n        var label = options.label !== undefined ? options.label : '\\u2922';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelNode_ =\n            typeof label === 'string' ? document.createTextNode(label) : label;\n        var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n        /**\n         * @private\n         * @type {Text|HTMLElement}\n         */\n        _this.labelActiveNode_ =\n            typeof labelActive === 'string'\n                ? document.createTextNode(labelActive)\n                : labelActive;\n        var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.button_ = document.createElement('button');\n        _this.button_.title = tipLabel;\n        _this.button_.setAttribute('type', 'button');\n        _this.button_.appendChild(_this.labelNode_);\n        _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        _this.setClassName_(_this.button_, _this.isInFullscreen_);\n        _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n        _this.element.appendChild(_this.button_);\n        return _this;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    FullScreen.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleFullScreen_();\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreen_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var doc = map.getOwnerDocument();\n        if (!isFullScreenSupported(doc)) {\n            return;\n        }\n        if (isFullScreen(doc)) {\n            exitFullScreen(doc);\n        }\n        else {\n            var element = void 0;\n            if (this.source_) {\n                element =\n                    typeof this.source_ === 'string'\n                        ? doc.getElementById(this.source_)\n                        : this.source_;\n            }\n            else {\n                element = map.getTargetElement();\n            }\n            if (this.keys_) {\n                requestFullScreenWithKeys(element);\n            }\n            else {\n                requestFullScreen(element);\n            }\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleFullScreenChange_ = function () {\n        var map = this.getMap();\n        if (!map) {\n            return;\n        }\n        var wasInFullscreen = this.isInFullscreen_;\n        this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n        if (wasInFullscreen !== this.isInFullscreen_) {\n            this.setClassName_(this.button_, this.isInFullscreen_);\n            if (this.isInFullscreen_) {\n                replaceNode(this.labelActiveNode_, this.labelNode_);\n                this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n            }\n            else {\n                replaceNode(this.labelNode_, this.labelActiveNode_);\n                this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n            }\n            map.updateSize();\n        }\n    };\n    /**\n     * @param {HTMLElement} element Target element\n     * @param {boolean} fullscreen True if fullscreen class name should be active\n     * @private\n     */\n    FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n        var _a, _b, _c, _d;\n        if (fullscreen) {\n            (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n            (_b = element.classList).add.apply(_b, this.activeClassName_);\n        }\n        else {\n            (_c = element.classList).remove.apply(_c, this.activeClassName_);\n            (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n        }\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    FullScreen.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (oldMap) {\n            oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n        _super.prototype.setMap.call(this, map);\n        this.handleMapTargetChange_();\n        if (map) {\n            map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n        }\n    };\n    /**\n     * @private\n     */\n    FullScreen.prototype.handleMapTargetChange_ = function () {\n        var listeners = this.documentListeners_;\n        for (var i = 0, ii = listeners.length; i < ii; ++i) {\n            unlistenByKey(listeners[i]);\n        }\n        listeners.length = 0;\n        var map = this.getMap();\n        if (map) {\n            var doc = map.getOwnerDocument();\n            if (isFullScreenSupported(doc)) {\n                this.element.classList.remove(CLASS_UNSUPPORTED);\n            }\n            else {\n                this.element.classList.add(CLASS_UNSUPPORTED);\n            }\n            for (var i = 0, ii = events.length; i < ii; ++i) {\n                listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n            }\n            this.handleFullScreenChange_();\n        }\n    };\n    return FullScreen;\n}(Control));\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n    var body = doc.body;\n    return !!(body['webkitRequestFullscreen'] ||\n        (body['msRequestFullscreen'] && doc['msFullscreenEnabled']) ||\n        (body.requestFullscreen && doc.fullscreenEnabled));\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n    return !!(doc['webkitIsFullScreen'] ||\n        doc['msFullscreenElement'] ||\n        doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n    if (element.requestFullscreen) {\n        element.requestFullscreen();\n    }\n    else if (element['msRequestFullscreen']) {\n        element['msRequestFullscreen']();\n    }\n    else if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n    if (element['webkitRequestFullscreen']) {\n        element['webkitRequestFullscreen']();\n    }\n    else {\n        requestFullScreen(element);\n    }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n    if (doc.exitFullscreen) {\n        doc.exitFullscreen();\n    }\n    else if (doc['msExitFullscreen']) {\n        doc['msExitFullscreen']();\n    }\n    else if (doc['webkitExitFullscreen']) {\n        doc['webkitExitFullscreen']();\n    }\n}\nexport default FullScreen;\n//# sourceMappingURL=FullScreen.js.map"]},"metadata":{},"sourceType":"module"}