{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */function (_super) {\n  __extends(ControlledMap, _super);\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ControlledMap.prototype.createRenderer = function () {\n    return new CompositeMapRenderer(this);\n  };\n  return ControlledMap;\n}(PluggableMap);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */function (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options} [opt_options] OverviewMap options.\n   */\n  function OverviewMap(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : '\\u203A';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    _this.view_ = options.view;\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box\n    });\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n    var move = function (event) {\n      var position = /** @type {?} */computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(/** @type {MouseEvent} */position);\n      overlay.setPosition(coordinates);\n    };\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      var oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView = /** @type {import(\"../View.js\").default} */event.oldValue;\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.bindView_ = function (view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      var newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n    var ovmapSize = /** @type {import(\"../size.js\").Size} */ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView();\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution;\n    // set position using center coordinates\n    overlay.setPosition(center);\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @private\n   */\n  OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    var ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  OverviewMap.prototype.render = function (mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  };\n  return OverviewMap;\n}(Control);\nexport default OverviewMap;","map":{"version":3,"sources":["../src/control/OverviewMap.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter, } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */ (function (_super) {\n    __extends(ControlledMap, _super);\n    function ControlledMap() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ControlledMap.prototype.createRenderer = function () {\n        return new CompositeMapRenderer(this);\n    };\n    return ControlledMap;\n}(PluggableMap));\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */ (function (_super) {\n    __extends(OverviewMap, _super);\n    /**\n     * @param {Options} [opt_options] OverviewMap options.\n     */\n    function OverviewMap(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         */\n        _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.rotateWithView_ =\n            options.rotateWithView !== undefined ? options.rotateWithView : false;\n        /**\n         * @private\n         * @type {import(\"../extent.js\").Extent|undefined}\n         */\n        _this.viewExtent_ = undefined;\n        var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : '\\u203A';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        var button = document.createElement('button');\n        button.setAttribute('type', 'button');\n        button.title = tipLabel;\n        button.appendChild(activeLabel);\n        button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        /**\n         * @type {HTMLElement}\n         * @private\n         */\n        _this.ovmapDiv_ = document.createElement('div');\n        _this.ovmapDiv_.className = 'ol-overviewmap-map';\n        /**\n         * Explicitly given view to be used instead of a view derived from the main map.\n         * @type {View}\n         * @private\n         */\n        _this.view_ = options.view;\n        /**\n         * @type {ControlledMap}\n         * @private\n         */\n        _this.ovmap_ = new ControlledMap({\n            view: options.view,\n        });\n        var ovmap = _this.ovmap_;\n        if (options.layers) {\n            options.layers.forEach(function (layer) {\n                ovmap.addLayer(layer);\n            });\n        }\n        var box = document.createElement('div');\n        box.className = 'ol-overviewmap-box';\n        box.style.boxSizing = 'border-box';\n        /**\n         * @type {import(\"../Overlay.js\").default}\n         * @private\n         */\n        _this.boxOverlay_ = new Overlay({\n            position: [0, 0],\n            positioning: 'center-center',\n            element: box,\n        });\n        _this.ovmap_.addOverlay(_this.boxOverlay_);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.ovmapDiv_);\n        element.appendChild(button);\n        /* Interactive map */\n        var scope = _this;\n        var overlay = _this.boxOverlay_;\n        var overlayBox = _this.boxOverlay_.getElement();\n        /* Functions definition */\n        var computeDesiredMousePosition = function (mousePosition) {\n            return {\n                clientX: mousePosition.clientX,\n                clientY: mousePosition.clientY,\n            };\n        };\n        var move = function (event) {\n            var position = /** @type {?} */ (computeDesiredMousePosition(event));\n            var coordinates = ovmap.getEventCoordinateInternal(\n            /** @type {MouseEvent} */ (position));\n            overlay.setPosition(coordinates);\n        };\n        var endMoving = function (event) {\n            var coordinates = ovmap.getEventCoordinateInternal(event);\n            scope.getMap().getView().setCenterInternal(coordinates);\n            window.removeEventListener('mousemove', move);\n            window.removeEventListener('mouseup', endMoving);\n        };\n        /* Binding */\n        overlayBox.addEventListener('mousedown', function () {\n            window.addEventListener('mousemove', move);\n            window.addEventListener('mouseup', endMoving);\n        });\n        return _this;\n    }\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    OverviewMap.prototype.setMap = function (map) {\n        var oldMap = this.getMap();\n        if (map === oldMap) {\n            return;\n        }\n        if (oldMap) {\n            var oldView = oldMap.getView();\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            this.ovmap_.setTarget(null);\n        }\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            this.ovmap_.setTarget(this.ovmapDiv_);\n            this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n            var view = map.getView();\n            if (view) {\n                this.bindView_(view);\n                if (view.isDef()) {\n                    this.ovmap_.updateSize();\n                    this.resetExtent_();\n                }\n            }\n            if (!this.ovmap_.isRendered()) {\n                this.updateBoxAfterOvmapIsRendered_();\n            }\n        }\n    };\n    /**\n     * Handle map property changes.  This only deals with changes to the map's view.\n     * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n     * @private\n     */\n    OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n        if (event.key === MapProperty.VIEW) {\n            var oldView = /** @type {import(\"../View.js\").default} */ (event.oldValue);\n            if (oldView) {\n                this.unbindView_(oldView);\n            }\n            var newView = this.getMap().getView();\n            this.bindView_(newView);\n        }\n        else if (!this.ovmap_.isRendered() &&\n            (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n            this.ovmap_.updateSize();\n        }\n    };\n    /**\n     * Register listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.bindView_ = function (view) {\n        if (!this.view_) {\n            // Unless an explicit view definition was given, derive default from whatever main map uses.\n            var newView = new View({\n                projection: view.getProjection(),\n            });\n            this.ovmap_.setView(newView);\n        }\n        view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n        // Sync once with the new view\n        this.handleRotationChanged_();\n    };\n    /**\n     * Unregister listeners for view property changes.\n     * @param {import(\"../View.js\").default} view The view.\n     * @private\n     */\n    OverviewMap.prototype.unbindView_ = function (view) {\n        view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    };\n    /**\n     * Handle rotation changes to the main map.\n     * @private\n     */\n    OverviewMap.prototype.handleRotationChanged_ = function () {\n        if (this.rotateWithView_) {\n            this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n        }\n    };\n    /**\n     * Reset the overview map extent if the box size (width or\n     * height) is less than the size of the overview map size times minRatio\n     * or is greater than the size of the overview size times maxRatio.\n     *\n     * If the map extent was not reset, the box size can fits in the defined\n     * ratio sizes. This method then checks if is contained inside the overview\n     * map current extent. If not, recenter the overview map to the current\n     * main map center location.\n     * @private\n     */\n    OverviewMap.prototype.validateExtent_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n            // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n            return;\n        }\n        this.viewExtent_ = extent;\n        var ovmapSize = /** @type {import(\"../size.js\").Size} */ (ovmap.getSize());\n        var ovview = ovmap.getView();\n        var ovextent = ovview.calculateExtentInternal(ovmapSize);\n        var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n        var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n        var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n        var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n        var ovmapWidth = ovmapSize[0];\n        var ovmapHeight = ovmapSize[1];\n        if (boxWidth < ovmapWidth * MIN_RATIO ||\n            boxHeight < ovmapHeight * MIN_RATIO ||\n            boxWidth > ovmapWidth * MAX_RATIO ||\n            boxHeight > ovmapHeight * MAX_RATIO) {\n            this.resetExtent_();\n        }\n        else if (!containsExtent(ovextent, extent)) {\n            this.recenter_();\n        }\n    };\n    /**\n     * Reset the overview map extent to half calculated min and max ratio times\n     * the extent of the main map.\n     * @private\n     */\n    OverviewMap.prototype.resetExtent_ = function () {\n        if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n            return;\n        }\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var extent = view.calculateExtentInternal(mapSize);\n        var ovview = ovmap.getView();\n        // get how many times the current map overview could hold different\n        // box sizes using the min and max ratio, pick the step in the middle used\n        // to calculate the extent from the main map to set it to the overview map,\n        var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n        var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n        scaleFromCenter(extent, ratio);\n        ovview.fitInternal(polygonFromExtent(extent));\n    };\n    /**\n     * Set the center of the overview map to the map center without changing its\n     * resolution.\n     * @private\n     */\n    OverviewMap.prototype.recenter_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        ovview.setCenterInternal(view.getCenterInternal());\n    };\n    /**\n     * Update the box using the main map extent\n     * @private\n     */\n    OverviewMap.prototype.updateBox_ = function () {\n        var map = this.getMap();\n        var ovmap = this.ovmap_;\n        if (!map.isRendered() || !ovmap.isRendered()) {\n            return;\n        }\n        var mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n        var view = map.getView();\n        var ovview = ovmap.getView();\n        var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n        var overlay = this.boxOverlay_;\n        var box = this.boxOverlay_.getElement();\n        var center = view.getCenterInternal();\n        var resolution = view.getResolution();\n        var ovresolution = ovview.getResolution();\n        var width = (mapSize[0] * resolution) / ovresolution;\n        var height = (mapSize[1] * resolution) / ovresolution;\n        // set position using center coordinates\n        overlay.setPosition(center);\n        // set box size calculated from map extent size and overview map resolution\n        if (box) {\n            box.style.width = width + 'px';\n            box.style.height = height + 'px';\n            var transform = 'rotate(' + rotation + 'rad)';\n            box.style.transform = transform;\n        }\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n        if (this.ovmapPostrenderKey_) {\n            return;\n        }\n        this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n            delete this.ovmapPostrenderKey_;\n            this.updateBox_();\n        }, this);\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    OverviewMap.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n    };\n    /**\n     * @private\n     */\n    OverviewMap.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        // manage overview map if it had not been rendered before and control\n        // is expanded\n        var ovmap = this.ovmap_;\n        if (!this.collapsed_) {\n            if (ovmap.isRendered()) {\n                this.viewExtent_ = undefined;\n                ovmap.render();\n                return;\n            }\n            ovmap.updateSize();\n            this.resetExtent_();\n            this.updateBoxAfterOvmapIsRendered_();\n        }\n    };\n    /**\n     * Return `true` if the overview map is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the overview map should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (!collapsible && this.collapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the overview map according to the passed parameter. Will\n     * not do anything if the overview map isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.setCollapsed = function (collapsed) {\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Determine if the overview map is collapsed.\n     * @return {boolean} The overview map is collapsed.\n     * @api\n     */\n    OverviewMap.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Return `true` if the overview map view can rotate, `false` otherwise.\n     * @return {boolean} True if the control view can rotate.\n     * @api\n     */\n    OverviewMap.prototype.getRotateWithView = function () {\n        return this.rotateWithView_;\n    };\n    /**\n     * Set whether the overview map view should rotate with the main map view.\n     * @param {boolean} rotateWithView True if the control view should rotate.\n     * @api\n     */\n    OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n        if (this.rotateWithView_ === rotateWithView) {\n            return;\n        }\n        this.rotateWithView_ = rotateWithView;\n        if (this.getMap().getView().getRotation() !== 0) {\n            if (this.rotateWithView_) {\n                this.handleRotationChanged_();\n            }\n            else {\n                this.ovmap_.getView().setRotation(0);\n            }\n            this.viewExtent_ = undefined;\n            this.validateExtent_();\n            this.updateBox_();\n        }\n    };\n    /**\n     * Return the overview map.\n     * @return {import(\"../PluggableMap.js\").default} Overview map.\n     * @api\n     */\n    OverviewMap.prototype.getOverviewMap = function () {\n        return this.ovmap_;\n    };\n    /**\n     * Update the overview map element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    OverviewMap.prototype.render = function (mapEvent) {\n        this.validateExtent_();\n        this.updateBox_();\n    };\n    return OverviewMap;\n}(Control));\nexport default OverviewMap;\n//# sourceMappingURL=OverviewMap.js.map"]},"metadata":{},"sourceType":"module"}