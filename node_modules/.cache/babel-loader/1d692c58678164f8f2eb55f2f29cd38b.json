{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /** @class */function (_super) {\n  __extends(SimpleGeometry, _super);\n  function SimpleGeometry() {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"./GeometryLayout.js\").default}\n     */\n    _this.layout = GeometryLayout.XY;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.stride = 2;\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    _this.flatCoordinates = null;\n    return _this;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  SimpleGeometry.prototype.computeExtent = function (extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  SimpleGeometry.prototype.getCoordinates = function () {\n    return abstract();\n  };\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  SimpleGeometry.prototype.getFirstCoordinate = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  SimpleGeometry.prototype.getFlatCoordinates = function () {\n    return this.flatCoordinates;\n  };\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  SimpleGeometry.prototype.getLastCoordinate = function () {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\n   * @api\n   */\n  SimpleGeometry.prototype.getLayout = function () {\n    return this.layout;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * @return {number} Stride.\n   */\n  SimpleGeometry.prototype.getStride = function () {\n    return this.stride;\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n    abstract();\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n    /** @type {number} */\n    var stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */coordinates[0];\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  SimpleGeometry.prototype.applyTransform = function (transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  SimpleGeometry.prototype.rotate = function (angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n  return SimpleGeometry;\n}(Geometry);\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  var layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return /** @type {import(\"./GeometryLayout.js\").default} */layout;\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  var stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */stride;\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry;","map":{"version":3,"sources":["../src/geom/SimpleGeometry.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /** @class */ (function (_super) {\n    __extends(SimpleGeometry, _super);\n    function SimpleGeometry() {\n        var _this = _super.call(this) || this;\n        /**\n         * @protected\n         * @type {import(\"./GeometryLayout.js\").default}\n         */\n        _this.layout = GeometryLayout.XY;\n        /**\n         * @protected\n         * @type {number}\n         */\n        _this.stride = 2;\n        /**\n         * @protected\n         * @type {Array<number>}\n         */\n        _this.flatCoordinates = null;\n        return _this;\n    }\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @protected\n     * @return {import(\"../extent.js\").Extent} extent Extent.\n     */\n    SimpleGeometry.prototype.computeExtent = function (extent) {\n        return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    };\n    /**\n     * @abstract\n     * @return {Array<*> | null} Coordinates.\n     */\n    SimpleGeometry.prototype.getCoordinates = function () {\n        return abstract();\n    };\n    /**\n     * Return the first coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n     * @api\n     */\n    SimpleGeometry.prototype.getFirstCoordinate = function () {\n        return this.flatCoordinates.slice(0, this.stride);\n    };\n    /**\n     * @return {Array<number>} Flat coordinates.\n     */\n    SimpleGeometry.prototype.getFlatCoordinates = function () {\n        return this.flatCoordinates;\n    };\n    /**\n     * Return the last coordinate of the geometry.\n     * @return {import(\"../coordinate.js\").Coordinate} Last point.\n     * @api\n     */\n    SimpleGeometry.prototype.getLastCoordinate = function () {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    };\n    /**\n     * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n     * @return {import(\"./GeometryLayout.js\").default} Layout.\n     * @api\n     */\n    SimpleGeometry.prototype.getLayout = function () {\n        return this.layout;\n    };\n    /**\n     * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 ||\n            (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n                squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)) {\n            return this;\n        }\n        var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n            return simplifiedGeometry;\n        }\n        else {\n            // Simplification did not actually remove any coordinates.  We now know\n            // that any calls to getSimplifiedGeometry with a squaredTolerance less\n            // than or equal to the current squaredTolerance will also not have any\n            // effect.  This allows us to short circuit simplification (saving CPU\n            // cycles) and prevents the cache of simplified geometries from filling\n            // up with useless identical copies of this geometry (saving memory).\n            this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n            return this;\n        }\n    };\n    /**\n     * @param {number} squaredTolerance Squared tolerance.\n     * @return {SimpleGeometry} Simplified geometry.\n     * @protected\n     */\n    SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n        return this;\n    };\n    /**\n     * @return {number} Stride.\n     */\n    SimpleGeometry.prototype.getStride = function () {\n        return this.stride;\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n     * @param {Array<number>} flatCoordinates Flat coordinates.\n     */\n    SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n        this.stride = getStrideForLayout(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    };\n    /**\n     * @abstract\n     * @param {!Array<*>} coordinates Coordinates.\n     * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n     */\n    SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n        abstract();\n    };\n    /**\n     * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n     * @param {Array<*>} coordinates Coordinates.\n     * @param {number} nesting Nesting.\n     * @protected\n     */\n    SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n        /** @type {number} */\n        var stride;\n        if (layout) {\n            stride = getStrideForLayout(layout);\n        }\n        else {\n            for (var i = 0; i < nesting; ++i) {\n                if (coordinates.length === 0) {\n                    this.layout = GeometryLayout.XY;\n                    this.stride = 2;\n                    return;\n                }\n                else {\n                    coordinates = /** @type {Array} */ (coordinates[0]);\n                }\n            }\n            stride = coordinates.length;\n            layout = getLayoutForStride(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    };\n    /**\n     * Apply a transform function to the coordinates of the geometry.\n     * The geometry is modified in place.\n     * If you do not want the geometry modified in place, first `clone()` it and\n     * then use this function on the clone.\n     * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n     * Called with a flat array of geometry coordinates.\n     * @api\n     */\n    SimpleGeometry.prototype.applyTransform = function (transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n            this.changed();\n        }\n    };\n    /**\n     * Rotate the geometry around a given coordinate. This modifies the geometry\n     * coordinates in place.\n     * @param {number} angle Rotation angle in counter-clockwise radians.\n     * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n     * @api\n     */\n    SimpleGeometry.prototype.rotate = function (angle, anchor) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Scale the geometry (with an optional origin).  This modifies the geometry\n     * coordinates in place.\n     * @param {number} sx The scaling factor in the x-direction.\n     * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n     *     of the geometry extent).\n     * @api\n     */\n    SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n        var sy = opt_sy;\n        if (sy === undefined) {\n            sy = sx;\n        }\n        var anchor = opt_anchor;\n        if (!anchor) {\n            anchor = getCenter(this.getExtent());\n        }\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    };\n    /**\n     * Translate the geometry.  This modifies the geometry coordinates in place.  If\n     * instead you want a new geometry, first `clone()` this geometry.\n     * @param {number} deltaX Delta X.\n     * @param {number} deltaY Delta Y.\n     * @api\n     */\n    SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n        var flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            var stride = this.getStride();\n            translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    };\n    return SimpleGeometry;\n}(Geometry));\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n    var layout;\n    if (stride == 2) {\n        layout = GeometryLayout.XY;\n    }\n    else if (stride == 3) {\n        layout = GeometryLayout.XYZ;\n    }\n    else if (stride == 4) {\n        layout = GeometryLayout.XYZM;\n    }\n    return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n    var stride;\n    if (layout == GeometryLayout.XY) {\n        stride = 2;\n    }\n    else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n        stride = 3;\n    }\n    else if (layout == GeometryLayout.XYZM) {\n        stride = 4;\n    }\n    return /** @type {number} */ (stride);\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n    var flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) {\n        return null;\n    }\n    else {\n        var stride = simpleGeometry.getStride();\n        return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n    }\n}\nexport default SimpleGeometry;\n//# sourceMappingURL=SimpleGeometry.js.map"]},"metadata":{},"sourceType":"module"}