{"ast":null,"code":"/**\n * @module ol/control/Control\n */\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { VOID } from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n    if (options.render) {\n      this.render = options.render;\n    }\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.element?.remove();\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.element?.remove();\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_ ?? map.getOverlayContainerStopEvent();\n      if (this.element) {\n        target.appendChild(this.element);\n      }\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\nexport default Control;","map":{"version":3,"names":["MapEventType","BaseObject","listen","unlistenByKey","VOID","Control","constructor","options","element","target","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","disposeInternal","remove","getMap","setMap","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"sources":["C:/prj/cnbcs_web_frontend/node_modules/ol/control/Control.js"],"sourcesContent":["/**\n * @module ol/control/Control\n */\nimport MapEventType from '../MapEventType.js';\nimport BaseObject from '../Object.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {VOID} from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   * @override\n   */\n  disposeInternal() {\n    this.element?.remove();\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.element?.remove();\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_ ?? map.getOverlayContainerStopEvent();\n      if (this.element) {\n        target.appendChild(this.element);\n      }\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this),\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}