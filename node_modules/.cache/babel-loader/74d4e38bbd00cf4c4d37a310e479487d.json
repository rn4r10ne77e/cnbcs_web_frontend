{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      var tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n        }\n      }\n      return extents;\n    }\n  );\n}","map":{"version":3,"sources":["src/loadingstrategy.js"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAQ,cAAc,EAAE,kBAAkB,EAAE,YAAY,QAAO,WAAW;AAE1E;;;;;;AAMG;AACH,OAAM,SAAU,GAAG,CAAC,MAAM,EAAE,UAAU,EAAA;EACpC,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACrD;AAEA;;;;;;;AAOG;AACH,OAAM,SAAU,IAAI,CAAC,MAAM,EAAE,UAAU,EAAA;EACrC,OAAO,CAAC,MAAM,CAAC;AACjB;AAEA;;;;;AAKG;AACH,OAAM,SAAU,IAAI,CAAC,QAAQ,EAAA;EAC3B;IACE;;;;;AAKG;IACH,UAAU,MAAM,EAAE,UAAU,EAAE,UAAU,EAAA;MACtC,IAAM,CAAC,GAAG,QAAQ,CAAC,iBAAiB,CAClC,kBAAkB,CAAC,UAAU,EAAE,UAAU,CAAC,CAC3C;MACD,IAAM,SAAS,GAAG,QAAQ,CAAC,yBAAyB,CAClD,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,EAClC,CAAC,CACF;MACD;MACA,IAAM,OAAO,GAAG,EAAE;MAClB;MACA,IAAM,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC3B,KACE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,EAC7B,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,EAC9B,EAAE,SAAS,CAAC,CAAC,CAAC,EACd;QACA,KACE,SAAS,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,IAAI,EAC7B,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,IAAI,EAC9B,EAAE,SAAS,CAAC,CAAC,CAAC,EACd;UACA,OAAO,CAAC,IAAI,CACV,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,SAAS,CAAC,EAAE,UAAU,CAAC,CACjE;QACF;MACF;MACD,OAAO,OAAO;IAChB;EAAC;AAEL","sourceRoot":"","sourcesContent":["/**\n * @module ol/loadingstrategy\n */\nimport { fromUserExtent, fromUserResolution, toUserExtent } from './proj.js';\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n    return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n    return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n    return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n        var z = tileGrid.getZForResolution(fromUserResolution(resolution, projection));\n        var tileRange = tileGrid.getTileRangeForExtentAndZ(fromUserExtent(extent, projection), z);\n        /** @type {Array<import(\"./extent.js\").Extent>} */\n        var extents = [];\n        /** @type {import(\"./tilecoord.js\").TileCoord} */\n        var tileCoord = [z, 0, 0];\n        for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n            for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n                extents.push(toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection));\n            }\n        }\n        return extents;\n    });\n}\n//# sourceMappingURL=loadingstrategy.js.map"]},"metadata":{},"sourceType":"module"}