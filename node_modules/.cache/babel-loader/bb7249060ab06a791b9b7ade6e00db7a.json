{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = /** @class */function () {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  function PriorityQueue(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  PriorityQueue.prototype.clear = function () {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  };\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  PriorityQueue.prototype.dequeue = function () {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    var elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  };\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  PriorityQueue.prototype.enqueue = function (element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n    var priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  };\n  /**\n   * @return {number} Count.\n   */\n  PriorityQueue.prototype.getCount = function () {\n    return this.elements_.length;\n  };\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  PriorityQueue.prototype.getLeftChildIndex_ = function (index) {\n    return index * 2 + 1;\n  };\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  PriorityQueue.prototype.getRightChildIndex_ = function (index) {\n    return index * 2 + 2;\n  };\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  PriorityQueue.prototype.getParentIndex_ = function (index) {\n    return index - 1 >> 1;\n  };\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  PriorityQueue.prototype.heapify_ = function () {\n    var i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  PriorityQueue.prototype.isEmpty = function () {\n    return this.elements_.length === 0;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  PriorityQueue.prototype.isKeyQueued = function (key) {\n    return key in this.queuedElements_;\n  };\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  PriorityQueue.prototype.isQueued = function (element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  };\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  PriorityQueue.prototype.siftUp_ = function (index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var count = elements.length;\n    var element = elements[index];\n    var priority = priorities[index];\n    var startIndex = index;\n    while (index < count >> 1) {\n      var lIndex = this.getLeftChildIndex_(index);\n      var rIndex = this.getRightChildIndex_(index);\n      var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  };\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  PriorityQueue.prototype.siftDown_ = function (startIndex, index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[index];\n    var priority = priorities[index];\n    while (index > startIndex) {\n      var parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  PriorityQueue.prototype.reprioritize = function () {\n    var priorityFunction = this.priorityFunction_;\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var index = 0;\n    var n = elements.length;\n    var element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  };\n  return PriorityQueue;\n}();\nexport default PriorityQueue;","map":{"version":3,"sources":["../src/structs/PriorityQueue.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = /** @class */ (function () {\n    /**\n     * @param {function(T): number} priorityFunction Priority function.\n     * @param {function(T): string} keyFunction Key function.\n     */\n    function PriorityQueue(priorityFunction, keyFunction) {\n        /**\n         * @type {function(T): number}\n         * @private\n         */\n        this.priorityFunction_ = priorityFunction;\n        /**\n         * @type {function(T): string}\n         * @private\n         */\n        this.keyFunction_ = keyFunction;\n        /**\n         * @type {Array<T>}\n         * @private\n         */\n        this.elements_ = [];\n        /**\n         * @type {Array<number>}\n         * @private\n         */\n        this.priorities_ = [];\n        /**\n         * @type {!Object<string, boolean>}\n         * @private\n         */\n        this.queuedElements_ = {};\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    PriorityQueue.prototype.clear = function () {\n        this.elements_.length = 0;\n        this.priorities_.length = 0;\n        clear(this.queuedElements_);\n    };\n    /**\n     * Remove and return the highest-priority element. O(log N).\n     * @return {T} Element.\n     */\n    PriorityQueue.prototype.dequeue = function () {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var element = elements[0];\n        if (elements.length == 1) {\n            elements.length = 0;\n            priorities.length = 0;\n        }\n        else {\n            elements[0] = elements.pop();\n            priorities[0] = priorities.pop();\n            this.siftUp_(0);\n        }\n        var elementKey = this.keyFunction_(element);\n        delete this.queuedElements_[elementKey];\n        return element;\n    };\n    /**\n     * Enqueue an element. O(log N).\n     * @param {T} element Element.\n     * @return {boolean} The element was added to the queue.\n     */\n    PriorityQueue.prototype.enqueue = function (element) {\n        assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n        var priority = this.priorityFunction_(element);\n        if (priority != DROP) {\n            this.elements_.push(element);\n            this.priorities_.push(priority);\n            this.queuedElements_[this.keyFunction_(element)] = true;\n            this.siftDown_(0, this.elements_.length - 1);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @return {number} Count.\n     */\n    PriorityQueue.prototype.getCount = function () {\n        return this.elements_.length;\n    };\n    /**\n     * Gets the index of the left child of the node at the given index.\n     * @param {number} index The index of the node to get the left child for.\n     * @return {number} The index of the left child.\n     * @private\n     */\n    PriorityQueue.prototype.getLeftChildIndex_ = function (index) {\n        return index * 2 + 1;\n    };\n    /**\n     * Gets the index of the right child of the node at the given index.\n     * @param {number} index The index of the node to get the right child for.\n     * @return {number} The index of the right child.\n     * @private\n     */\n    PriorityQueue.prototype.getRightChildIndex_ = function (index) {\n        return index * 2 + 2;\n    };\n    /**\n     * Gets the index of the parent of the node at the given index.\n     * @param {number} index The index of the node to get the parent for.\n     * @return {number} The index of the parent.\n     * @private\n     */\n    PriorityQueue.prototype.getParentIndex_ = function (index) {\n        return (index - 1) >> 1;\n    };\n    /**\n     * Make this a heap. O(N).\n     * @private\n     */\n    PriorityQueue.prototype.heapify_ = function () {\n        var i;\n        for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n            this.siftUp_(i);\n        }\n    };\n    /**\n     * @return {boolean} Is empty.\n     */\n    PriorityQueue.prototype.isEmpty = function () {\n        return this.elements_.length === 0;\n    };\n    /**\n     * @param {string} key Key.\n     * @return {boolean} Is key queued.\n     */\n    PriorityQueue.prototype.isKeyQueued = function (key) {\n        return key in this.queuedElements_;\n    };\n    /**\n     * @param {T} element Element.\n     * @return {boolean} Is queued.\n     */\n    PriorityQueue.prototype.isQueued = function (element) {\n        return this.isKeyQueued(this.keyFunction_(element));\n    };\n    /**\n     * @param {number} index The index of the node to move down.\n     * @private\n     */\n    PriorityQueue.prototype.siftUp_ = function (index) {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var count = elements.length;\n        var element = elements[index];\n        var priority = priorities[index];\n        var startIndex = index;\n        while (index < count >> 1) {\n            var lIndex = this.getLeftChildIndex_(index);\n            var rIndex = this.getRightChildIndex_(index);\n            var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex]\n                ? rIndex\n                : lIndex;\n            elements[index] = elements[smallerChildIndex];\n            priorities[index] = priorities[smallerChildIndex];\n            index = smallerChildIndex;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n        this.siftDown_(startIndex, index);\n    };\n    /**\n     * @param {number} startIndex The index of the root.\n     * @param {number} index The index of the node to move up.\n     * @private\n     */\n    PriorityQueue.prototype.siftDown_ = function (startIndex, index) {\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var element = elements[index];\n        var priority = priorities[index];\n        while (index > startIndex) {\n            var parentIndex = this.getParentIndex_(index);\n            if (priorities[parentIndex] > priority) {\n                elements[index] = elements[parentIndex];\n                priorities[index] = priorities[parentIndex];\n                index = parentIndex;\n            }\n            else {\n                break;\n            }\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    PriorityQueue.prototype.reprioritize = function () {\n        var priorityFunction = this.priorityFunction_;\n        var elements = this.elements_;\n        var priorities = this.priorities_;\n        var index = 0;\n        var n = elements.length;\n        var element, i, priority;\n        for (i = 0; i < n; ++i) {\n            element = elements[i];\n            priority = priorityFunction(element);\n            if (priority == DROP) {\n                delete this.queuedElements_[this.keyFunction_(element)];\n            }\n            else {\n                priorities[index] = priority;\n                elements[index++] = element;\n            }\n        }\n        elements.length = index;\n        priorities.length = index;\n        this.heapify_();\n    };\n    return PriorityQueue;\n}());\nexport default PriorityQueue;\n//# sourceMappingURL=PriorityQueue.js.map"]},"metadata":{},"sourceType":"module"}