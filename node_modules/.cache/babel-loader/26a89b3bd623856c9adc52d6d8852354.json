{"ast":null,"code":"/**\n * @module ol/style/Fill\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = /** @class */function () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Fill(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n  }\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  Fill.prototype.clone = function () {\n    var color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined\n    });\n  };\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\n   * @api\n   */\n  Fill.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\n   * @api\n   */\n  Fill.prototype.setColor = function (color) {\n    this.color_ = color;\n  };\n  return Fill;\n}();\nexport default Fill;","map":{"version":3,"sources":["../src/style/Fill.js"],"names":[],"mappings":"AAAA;;AAEG;AAEH;;;;;AAKG;AAEH;;;;AAIG;AACH,IAAA,IAAA,GAAA,aAAA,YAAA;EACE;;AAEG;EACH,SAAA,IAAA,CAAY,WAAW,EAAA;IACrB,IAAM,OAAO,GAAG,WAAW,IAAI,CAAA,CAAE;IAEjC;;;AAGG;IACH,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI;EAClE;EAEA;;;;AAIG;EACH,IAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,IAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAA,CAAE;IAC7B,OAAO,IAAI,IAAI,CAAC;MACd,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAA,CAAE,GAAG,KAAK,IAAI;KACxD,CAAC;EACJ,CAAC;EAED;;;;AAIG;EACH,IAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,YAAA;IACE,OAAO,IAAI,CAAC,MAAM;EACpB,CAAC;EAED;;;;;AAKG;EACH,IAAA,CAAA,SAAA,CAAA,QAAQ,GAAR,UAAS,KAAK,EAAA;IACZ,IAAI,CAAC,MAAM,GAAG,KAAK;EACrB,CAAC;EACH,OAAA,IAAC;AAAD,CAAC,CAAA,CAAA;AAED,eAAe,IAAI","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/Fill\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nvar Fill = /** @class */ (function () {\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Fill(opt_options) {\n        var options = opt_options || {};\n        /**\n         * @private\n         * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\n         */\n        this.color_ = options.color !== undefined ? options.color : null;\n    }\n    /**\n     * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n     * @return {Fill} The cloned style.\n     * @api\n     */\n    Fill.prototype.clone = function () {\n        var color = this.getColor();\n        return new Fill({\n            color: Array.isArray(color) ? color.slice() : color || undefined,\n        });\n    };\n    /**\n     * Get the fill color.\n     * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\n     * @api\n     */\n    Fill.prototype.getColor = function () {\n        return this.color_;\n    };\n    /**\n     * Set the color.\n     *\n     * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\n     * @api\n     */\n    Fill.prototype.setColor = function (color) {\n        this.color_ = color;\n    };\n    return Fill;\n}());\nexport default Fill;\n//# sourceMappingURL=Fill.js.map"]},"metadata":{},"sourceType":"module"}