{"ast":null,"code":"/**\n * @module ol/render\n */\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render.js';\n * import Fill from 'ol/style/Fill.js';\n * import Polygon from 'ol/geom/Polygon.js';\n *\n * const canvas = document.createElement('canvas');\n * const render = toContext(\n *     canvas.getContext('2d'),\n *     {size: [100, 100]}\n * );\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]])\n * );\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, options) {\n  const canvas = context.canvas;\n  options = options ? options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  }\n\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  const a = event.inversePixelTransform[0];\n  const b = event.inversePixelTransform[1];\n  const canvasPixelRatio = Math.sqrt(a * a + b * b);\n  const frameState = event.frameState;\n  const transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  const squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n  return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}","map":{"version":3,"names":["DEVICE_PIXEL_RATIO","getTransformFromProjections","getUserProjection","CanvasImmediateRenderer","getSquaredTolerance","apply","applyTransform","create","createTransform","multiply","multiplyTransform","scale","scaleTransform","toContext","context","options","canvas","pixelRatio","size","width","height","style","extent","transform","getVectorContext","event","CanvasRenderingContext2D","Error","a","inversePixelTransform","b","canvasPixelRatio","Math","sqrt","frameState","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userTransform","userProjection","projection","rotation","getRenderPixel","pixel"],"sources":["C:/prj/cnbcs_web_frontend/node_modules/ol/render.js"],"sourcesContent":["/**\n * @module ol/render\n */\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport {getSquaredTolerance} from './renderer/vector.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply as multiplyTransform,\n  scale as scaleTransform,\n} from './transform.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render.js';\n * import Fill from 'ol/style/Fill.js';\n * import Polygon from 'ol/geom/Polygon.js';\n *\n * const canvas = document.createElement('canvas');\n * const render = toContext(\n *     canvas.getContext('2d'),\n *     {size: [100, 100]}\n * );\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]])\n * );\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, options) {\n  const canvas = context.canvas;\n  options = options ? options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  }\n\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  const a = event.inversePixelTransform[0];\n  const b = event.inversePixelTransform[1];\n  const canvasPixelRatio = Math.sqrt(a * a + b * b);\n  const frameState = event.frameState;\n  const transform = multiplyTransform(\n    event.inversePixelTransform.slice(),\n    frameState.coordinateToPixelTransform,\n  );\n  const squaredTolerance = getSquaredTolerance(\n    frameState.viewState.resolution,\n    canvasPixelRatio,\n  );\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(\n      userProjection,\n      frameState.viewState.projection,\n    );\n  }\n\n  return new CanvasImmediateRenderer(\n    event.context,\n    canvasPixelRatio,\n    frameState.extent,\n    transform,\n    frameState.viewState.rotation,\n    squaredTolerance,\n    userTransform,\n  );\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}