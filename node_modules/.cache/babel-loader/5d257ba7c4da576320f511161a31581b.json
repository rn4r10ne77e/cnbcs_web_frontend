{"ast":null,"code":"/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, dest, destinationStride) {\n  dest = dest ? dest : [];\n  destinationStride = destinationStride ? destinationStride : 2;\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n    for (let k = 2; k < destinationStride; k++) {\n      dest[i++] = flatCoordinates[j + k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, dest) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}","map":{"version":3,"names":["transform2D","flatCoordinates","offset","end","stride","transform","dest","destinationStride","i","j","x","y","k","length","rotate","angle","anchor","cos","Math","sin","anchorX","anchorY","deltaX","deltaY","scale","sx","sy","translate"],"sources":["C:/prj/cnbcs_web_frontend/node_modules/ol/geom/flat/transform.js"],"sourcesContent":["/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [destinationStride] Stride of destination coordinates; if unspecified, assumed to be 2.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest,\n  destinationStride,\n) {\n  dest = dest ? dest : [];\n  destinationStride = destinationStride ? destinationStride : 2;\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n\n    for (let k = 2; k < destinationStride; k++) {\n      dest[i++] = flatCoordinates[j + k];\n    }\n  }\n\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest,\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest,\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}