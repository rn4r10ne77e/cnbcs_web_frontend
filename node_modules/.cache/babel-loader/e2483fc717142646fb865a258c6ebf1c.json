{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string|boolean} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space\n * is rendered when the mouse leaves the viewport.  To render something else, provide a string\n * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder\n * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this\n * will be the default behavior.\n * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */function (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options} [opt_options] Mouse position options.\n   */\n  function MousePosition(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render,\n      target: options.target\n    }) || this;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    _this.un;\n    _this.addChangeListener(PROJECTION, _this.handleProjectionChanged_);\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * Change this to `false` when removing the deprecated `undefinedHTML` option.\n     * @type {boolean}\n     */\n    var renderOnMouseOut = true;\n    /**\n     * @type {string}\n     */\n    var placeholder = '&#160;';\n    if ('undefinedHTML' in options) {\n      // deprecated behavior\n      if (options.undefinedHTML !== undefined) {\n        placeholder = options.undefinedHTML;\n      }\n      renderOnMouseOut = !!placeholder;\n    } else if ('placeholder' in options) {\n      if (options.placeholder === false) {\n        renderOnMouseOut = false;\n      } else {\n        placeholder = String(options.placeholder);\n      }\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.placeholder_ = placeholder;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderOnMouseOut_ = renderOnMouseOut;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */this.get(COORDINATE_FORMAT);\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getProjection = function () {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */this.get(PROJECTION);\n  };\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n      this.updateHTML_(null);\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  MousePosition.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  };\n  return MousePosition;\n}(Control);\nexport default MousePosition;","map":{"version":3,"sources":["../src/control/MousePosition.js"],"names":[],"mappings":"AAAA;;AAEG;;;;;;;;;;;;;;;;;;;;;AAEH,OAAO,OAAO,MAAM,cAAc;AAClC,OAAO,SAAS,MAAM,yBAAyB;AAC/C,SACE,GAAG,IAAI,aAAa,EACpB,2BAA2B,EAC3B,iBAAiB,EACjB,iBAAiB,QACZ,YAAY;AACnB,SAAQ,MAAM,QAAO,cAAc;AAEnC;;AAEG;AACH,IAAM,UAAU,GAAG,YAAY;AAE/B;;AAEG;AACH,IAAM,iBAAiB,GAAG,kBAAkB;AAE5C;;;;;;;AAOG;AAEH;;;;;;;;;;;;;;;;;AAiBG;AAEH;;;;;;;;;;;AAWG;AACH,IAAA,aAAA,GAAA,aAAA,UAAA,MAAA,EAAA;EAA4B,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;EAC1B;;AAEG;EACH,SAAA,aAAA,CAAY,WAAW,EAAA;IAAvB,IAAA,KAAA,GAAA,IAAA;IACE,IAAM,OAAO,GAAG,WAAW,GAAG,WAAW,GAAG,CAAA,CAAE;IAE9C,IAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;IAC7C,OAAO,CAAC,SAAS,GACf,OAAO,CAAC,SAAS,KAAK,SAAS,GAAG,OAAO,CAAC,SAAS,GAAG,mBAAmB;YAE3E,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM;MACJ,OAAO,EAAE,OAAO;MAChB,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,MAAM,EAAE,OAAO,CAAC;KACjB,CAAC,IAAA,IAAA;IAEF;;AAEG;IACH,KAAI,CAAC,EAAE;IAEP;;AAEG;IACH,KAAI,CAAC,IAAI;IAET;;AAEG;IACH,KAAI,CAAC,EAAE;IAEP,KAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,KAAI,CAAC,wBAAwB,CAAC;IAEjE,IAAI,OAAO,CAAC,gBAAgB,EAAE;MAC5B,KAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,gBAAgB,CAAC;IACnD;IACD,IAAI,OAAO,CAAC,UAAU,EAAE;MACtB,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC;IACvC;IAED;;;AAGG;IACH,IAAI,gBAAgB,GAAG,IAAI;IAE3B;;AAEG;IACH,IAAI,WAAW,GAAG,QAAQ;IAE1B,IAAI,eAAe,IAAI,OAAO,EAAE;MAC9B;MACA,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE;QACvC,WAAW,GAAG,OAAO,CAAC,aAAa;MACpC;MACD,gBAAgB,GAAG,CAAC,CAAC,WAAW;KACjC,MAAM,IAAI,aAAa,IAAI,OAAO,EAAE;MACnC,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK,EAAE;QACjC,gBAAgB,GAAG,KAAK;OACzB,MAAM;QACL,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC;MAC1C;IACF;IAED;;;AAGG;IACH,KAAI,CAAC,YAAY,GAAG,WAAW;IAE/B;;;AAGG;IACH,KAAI,CAAC,iBAAiB,GAAG,gBAAgB;IAEzC;;;AAGG;IACH,KAAI,CAAC,aAAa,GAAG,OAAO,CAAC,SAAS;IAEtC;;;AAGG;IACH,KAAI,CAAC,cAAc,GAAG,IAAI;IAE1B;;;AAGG;IACH,KAAI,CAAC,UAAU,GAAG,IAAI;;EACxB;EAEA;;AAEG;EACH,aAAA,CAAA,SAAA,CAAA,wBAAwB,GAAxB,YAAA;IACE,IAAI,CAAC,UAAU,GAAG,IAAI;EACxB,CAAC;EAED;;;;;;;AAOG;EACH,aAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,YAAA;IACE,OAAO,oEACL,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC;EAE/B,CAAC;EAED;;;;;;AAMG;EACH,aAAA,CAAA,SAAA,CAAA,aAAa,GAAb,YAAA;IACE,OAAO,gEACL,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC;EAExB,CAAC;EAED;;;AAGG;EACH,aAAA,CAAA,SAAA,CAAA,eAAe,GAAf,UAAgB,KAAK,EAAA;IACnB,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAA,CAAE;IACzB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;EAC5C,CAAC;EAED;;;AAGG;EACH,aAAA,CAAA,SAAA,CAAA,cAAc,GAAd,UAAe,KAAK,EAAA;IAClB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;EACxB,CAAC;EAED;;;;;;;AAOG;EACH,aAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,GAAG,EAAA;IACR,MAAA,CAAA,SAAA,CAAM,MAAM,CAAA,IAAA,CAAA,IAAA,EAAC,GAAG,CAAC;IACjB,IAAI,GAAG,EAAE;MACP,IAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,CAAA,CAAE;MAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,CACpE;MACD,IAAI,IAAI,CAAC,iBAAiB,EAAE;QAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CACpB,MAAM,CAAC,QAAQ,EAAE,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,CAClE;MACF;MACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;IACvB;EACH,CAAC;EAED;;;;;;AAMG;EACH,aAAA,CAAA,SAAA,CAAA,mBAAmB,GAAnB,UAAoB,MAAM,EAAA;IACxB,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC;EACrC,CAAC;EAED;;;;;;AAMG;EACH,aAAA,CAAA,SAAA,CAAA,aAAa,GAAb,UAAc,UAAU,EAAA;IACtB,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;EACjD,CAAC;EAED;;;AAGG;EACH,aAAA,CAAA,SAAA,CAAA,WAAW,GAAX,UAAY,KAAK,EAAA;IACf,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY;IAC5B,IAAI,KAAK,IAAI,IAAI,CAAC,cAAc,EAAE;MAChC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;QACpB,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAA,CAAE;QACvC,IAAI,UAAU,EAAE;UACd,IAAI,CAAC,UAAU,GAAG,2BAA2B,CAC3C,IAAI,CAAC,cAAc,EACnB,UAAU,CACX;SACF,MAAM;UACL,IAAI,CAAC,UAAU,GAAG,iBAAiB;QACpC;MACF;MACD,IAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAA,CAAE;MACzB,IAAM,UAAU,GAAG,GAAG,CAAC,8BAA8B,CAAC,KAAK,CAAC;MAC5D,IAAI,UAAU,EAAE;QACd,IAAM,cAAc,GAAG,iBAAiB,CAAA,CAAE;QAC1C,IAAI,cAAc,EAAE;UAClB,IAAI,CAAC,UAAU,GAAG,2BAA2B,CAC3C,IAAI,CAAC,cAAc,EACnB,cAAc,CACf;QACF;QACD,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC;QACvC,IAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAA,CAAE;QACnD,IAAI,gBAAgB,EAAE;UACpB,IAAI,GAAG,gBAAgB,CAAC,UAAU,CAAC;SACpC,MAAM;UACL,IAAI,GAAG,UAAU,CAAC,QAAQ,CAAA,CAAE;QAC7B;MACF;IACF;IACD,IAAI,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,KAAK,IAAI,CAAC,aAAa,EAAE;MACtD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI;MAC7B,IAAI,CAAC,aAAa,GAAG,IAAI;IAC1B;EACH,CAAC;EAED;;;;;AAKG;EACH,aAAA,CAAA,SAAA,CAAA,MAAM,GAAN,UAAO,QAAQ,EAAA;IACb,IAAM,UAAU,GAAG,QAAQ,CAAC,UAAU;IACtC,IAAI,CAAC,UAAU,EAAE;MACf,IAAI,CAAC,cAAc,GAAG,IAAI;KAC3B,MAAM;MACL,IAAI,IAAI,CAAC,cAAc,IAAI,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE;QAC1D,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU;QACrD,IAAI,CAAC,UAAU,GAAG,IAAI;MACvB;IACF;EACH,CAAC;EACH,OAAA,aAAC;AAAD,CAAC,CA9P2B,OAAO,CAAA;AAgQnC,eAAe,aAAa","sourceRoot":"","sourcesContent":["/**\n * @module ol/control/MousePosition\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform, } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string|boolean} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space\n * is rendered when the mouse leaves the viewport.  To render something else, provide a string\n * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder\n * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this\n * will be the default behavior.\n * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */ (function (_super) {\n    __extends(MousePosition, _super);\n    /**\n     * @param {Options} [opt_options] Mouse position options.\n     */\n    function MousePosition(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        var element = document.createElement('div');\n        element.className =\n            options.className !== undefined ? options.className : 'ol-mouse-position';\n        _this = _super.call(this, {\n            element: element,\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /***\n         * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {MousePositionOnSignature<void>}\n         */\n        _this.un;\n        _this.addChangeListener(PROJECTION, _this.handleProjectionChanged_);\n        if (options.coordinateFormat) {\n            _this.setCoordinateFormat(options.coordinateFormat);\n        }\n        if (options.projection) {\n            _this.setProjection(options.projection);\n        }\n        /**\n         * Change this to `false` when removing the deprecated `undefinedHTML` option.\n         * @type {boolean}\n         */\n        var renderOnMouseOut = true;\n        /**\n         * @type {string}\n         */\n        var placeholder = '&#160;';\n        if ('undefinedHTML' in options) {\n            // deprecated behavior\n            if (options.undefinedHTML !== undefined) {\n                placeholder = options.undefinedHTML;\n            }\n            renderOnMouseOut = !!placeholder;\n        }\n        else if ('placeholder' in options) {\n            if (options.placeholder === false) {\n                renderOnMouseOut = false;\n            }\n            else {\n                placeholder = String(options.placeholder);\n            }\n        }\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.placeholder_ = placeholder;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderOnMouseOut_ = renderOnMouseOut;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.renderedHTML_ = element.innerHTML;\n        /**\n         * @private\n         * @type {?import(\"../proj/Projection.js\").default}\n         */\n        _this.mapProjection_ = null;\n        /**\n         * @private\n         * @type {?import(\"../proj.js\").TransformFunction}\n         */\n        _this.transform_ = null;\n        return _this;\n    }\n    /**\n     * @private\n     */\n    MousePosition.prototype.handleProjectionChanged_ = function () {\n        this.transform_ = null;\n    };\n    /**\n     * Return the coordinate format type used to render the current position or\n     * undefined.\n     * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.getCoordinateFormat = function () {\n        return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (this.get(COORDINATE_FORMAT));\n    };\n    /**\n     * Return the projection that is used to report the mouse position.\n     * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.getProjection = function () {\n        return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (this.get(PROJECTION));\n    };\n    /**\n     * @param {MouseEvent} event Browser event.\n     * @protected\n     */\n    MousePosition.prototype.handleMouseMove = function (event) {\n        var map = this.getMap();\n        this.updateHTML_(map.getEventPixel(event));\n    };\n    /**\n     * @param {Event} event Browser event.\n     * @protected\n     */\n    MousePosition.prototype.handleMouseOut = function (event) {\n        this.updateHTML_(null);\n    };\n    /**\n     * Remove the control from its current map and attach it to the new map.\n     * Pass `null` to just remove the control from the current map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default|null} map Map.\n     * @api\n     */\n    MousePosition.prototype.setMap = function (map) {\n        _super.prototype.setMap.call(this, map);\n        if (map) {\n            var viewport = map.getViewport();\n            this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n            if (this.renderOnMouseOut_) {\n                this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n            }\n            this.updateHTML_(null);\n        }\n    };\n    /**\n     * Set the coordinate format type used to render the current position.\n     * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.setCoordinateFormat = function (format) {\n        this.set(COORDINATE_FORMAT, format);\n    };\n    /**\n     * Set the projection that is used to report the mouse position.\n     * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n     *     position in.\n     * @observable\n     * @api\n     */\n    MousePosition.prototype.setProjection = function (projection) {\n        this.set(PROJECTION, getProjection(projection));\n    };\n    /**\n     * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @private\n     */\n    MousePosition.prototype.updateHTML_ = function (pixel) {\n        var html = this.placeholder_;\n        if (pixel && this.mapProjection_) {\n            if (!this.transform_) {\n                var projection = this.getProjection();\n                if (projection) {\n                    this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n                }\n                else {\n                    this.transform_ = identityTransform;\n                }\n            }\n            var map = this.getMap();\n            var coordinate = map.getCoordinateFromPixelInternal(pixel);\n            if (coordinate) {\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n                }\n                this.transform_(coordinate, coordinate);\n                var coordinateFormat = this.getCoordinateFormat();\n                if (coordinateFormat) {\n                    html = coordinateFormat(coordinate);\n                }\n                else {\n                    html = coordinate.toString();\n                }\n            }\n        }\n        if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n            this.element.innerHTML = html;\n            this.renderedHTML_ = html;\n        }\n    };\n    /**\n     * Update the projection. Rendering of the coordinates is done in\n     * `handleMouseMove` and `handleMouseUp`.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    MousePosition.prototype.render = function (mapEvent) {\n        var frameState = mapEvent.frameState;\n        if (!frameState) {\n            this.mapProjection_ = null;\n        }\n        else {\n            if (this.mapProjection_ != frameState.viewState.projection) {\n                this.mapProjection_ = frameState.viewState.projection;\n                this.transform_ = null;\n            }\n        }\n    };\n    return MousePosition;\n}(Control));\nexport default MousePosition;\n//# sourceMappingURL=MousePosition.js.map"]},"metadata":{},"sourceType":"module"}