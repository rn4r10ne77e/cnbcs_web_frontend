{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nvar IconImageCache = /** @class */function () {\n  function IconImageCache() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();","map":{"version":3,"sources":["../src/style/IconImageCache.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,SAAQ,QAAQ,QAAO,aAAa;AAEpC;;;AAGG;AACH,IAAA,cAAA,GAAA,aAAA,YAAA;EACE,SAAA,cAAA,CAAA,EAAA;IACE;;;AAGG;IACH,IAAI,CAAC,MAAM,GAAG,CAAA,CAAE;IAEhB;;;AAGG;IACH,IAAI,CAAC,UAAU,GAAG,CAAC;IAEnB;;;AAGG;IACH,IAAI,CAAC,aAAa,GAAG,EAAE;EACzB;EAEA;;AAEG;EACH,cAAA,CAAA,SAAA,CAAA,KAAK,GAAL,YAAA;IACE,IAAI,CAAC,MAAM,GAAG,CAAA,CAAE;IAChB,IAAI,CAAC,UAAU,GAAG,CAAC;EACrB,CAAC;EAED;;AAEG;EACH,cAAA,CAAA,SAAA,CAAA,cAAc,GAAd,YAAA;IACE,OAAO,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa;EAC7C,CAAC;EAED;;AAEG;EACH,cAAA,CAAA,SAAA,CAAA,MAAM,GAAN,YAAA;IACE,IAAI,IAAI,CAAC,cAAc,CAAA,CAAE,EAAE;MACzB,IAAI,CAAC,GAAG,CAAC;MACT,KAAK,IAAM,GAAG,IAAI,IAAI,CAAC,MAAM,EAAE;QAC7B,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;QAClC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAA,CAAE,EAAE;UAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;UACvB,EAAE,IAAI,CAAC,UAAU;QAClB;MACF;IACF;EACH,CAAC;EAED;;;;;AAKG;EACH,cAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,GAAG,EAAE,WAAW,EAAE,KAAK,EAAA;IACzB,IAAM,GAAG,GAAG,MAAM,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC;IAC3C,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI;EACrD,CAAC;EAED;;;;;AAKG;EACH,cAAA,CAAA,SAAA,CAAA,GAAG,GAAH,UAAI,GAAG,EAAE,WAAW,EAAE,KAAK,EAAE,SAAS,EAAA;IACpC,IAAM,GAAG,GAAG,MAAM,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,CAAC;IAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS;IAC5B,EAAE,IAAI,CAAC,UAAU;EACnB,CAAC;EAED;;;;;;AAMG;EACH,cAAA,CAAA,SAAA,CAAA,OAAO,GAAP,UAAQ,YAAY,EAAA;IAClB,IAAI,CAAC,aAAa,GAAG,YAAY;IACjC,IAAI,CAAC,MAAM,CAAA,CAAE;EACf,CAAC;EACH,OAAA,cAAC;AAAD,CAAC,CAAA,CAAA;AAED;;;;;AAKG;AACH,SAAS,MAAM,CAAC,GAAG,EAAE,WAAW,EAAE,KAAK,EAAA;EACrC,IAAM,WAAW,GAAG,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,MAAM;EACpD,OAAO,WAAW,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,WAAW;AACpD;AAEA,eAAe,cAAc;AAE7B;;;;AAIG;AACH,OAAO,IAAM,MAAM,GAAG,IAAI,cAAc,CAAA,CAAE","sourceRoot":"","sourcesContent":["/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nvar IconImageCache = /** @class */ (function () {\n    function IconImageCache() {\n        /**\n         * @type {!Object<string, import(\"./IconImage.js\").default>}\n         * @private\n         */\n        this.cache_ = {};\n        /**\n         * @type {number}\n         * @private\n         */\n        this.cacheSize_ = 0;\n        /**\n         * @type {number}\n         * @private\n         */\n        this.maxCacheSize_ = 32;\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.clear = function () {\n        this.cache_ = {};\n        this.cacheSize_ = 0;\n    };\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    IconImageCache.prototype.canExpireCache = function () {\n        return this.cacheSize_ > this.maxCacheSize_;\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    IconImageCache.prototype.expire = function () {\n        if (this.canExpireCache()) {\n            var i = 0;\n            for (var key in this.cache_) {\n                var iconImage = this.cache_[key];\n                if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n                    delete this.cache_[key];\n                    --this.cacheSize_;\n                }\n            }\n        }\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @return {import(\"./IconImage.js\").default} Icon image.\n     */\n    IconImageCache.prototype.get = function (src, crossOrigin, color) {\n        var key = getKey(src, crossOrigin, color);\n        return key in this.cache_ ? this.cache_[key] : null;\n    };\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n     */\n    IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n        var key = getKey(src, crossOrigin, color);\n        this.cache_[key] = iconImage;\n        ++this.cacheSize_;\n    };\n    /**\n     * Set the cache size of the icon cache. Default is `32`. Change this value when\n     * your map uses more than 32 different icon images and you are not caching icon\n     * styles on the application level.\n     * @param {number} maxCacheSize Cache max size.\n     * @api\n     */\n    IconImageCache.prototype.setSize = function (maxCacheSize) {\n        this.maxCacheSize_ = maxCacheSize;\n        this.expire();\n    };\n    return IconImageCache;\n}());\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n    var colorString = color ? asString(color) : 'null';\n    return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();\n//# sourceMappingURL=IconImageCache.js.map"]},"metadata":{},"sourceType":"module"}