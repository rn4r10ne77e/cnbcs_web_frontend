{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] * HIT_DETECT_RESOLUTION;\n  var height = size[1] * HIT_DETECT_RESOLUTION;\n  var context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  var featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    var styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    var index = i * indexFactor;\n    var color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      var stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        var imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        var img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: IconAnchorUnits.PIXELS,\n          anchorYUnits: IconAnchorUnits.PIXELS,\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      var zIndex = style.getZIndex() || 0;\n      var byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n    }\n  }\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);\n  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (var type in byGeometryType) {\n      var geomAndStyle = byGeometryType[type];\n      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n  if (imageData) {\n    var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    var index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}","map":{"version":3,"sources":["../../src/render/canvas/hitdetect.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n    var width = size[0] * HIT_DETECT_RESOLUTION;\n    var height = size[1] * HIT_DETECT_RESOLUTION;\n    var context = createCanvasContext2D(width, height);\n    context.imageSmoothingEnabled = false;\n    var canvas = context.canvas;\n    var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n    var featureCount = features.length;\n    // Stretch hit detection index to use the whole available color range\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n    var featuresByZIndex = {};\n    for (var i = 1; i <= featureCount; ++i) {\n        var feature = features[i - 1];\n        var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n        if (!styleFunction) {\n            continue;\n        }\n        var styles = featureStyleFunction(feature, resolution);\n        if (!styles) {\n            continue;\n        }\n        if (!Array.isArray(styles)) {\n            styles = [styles];\n        }\n        var index = i * indexFactor;\n        var color = '#' + ('000000' + index.toString(16)).slice(-6);\n        for (var j = 0, jj = styles.length; j < jj; ++j) {\n            var originalStyle = styles[j];\n            var geometry = originalStyle.getGeometryFunction()(feature);\n            if (!geometry || !intersects(extent, geometry.getExtent())) {\n                continue;\n            }\n            var style = originalStyle.clone();\n            var fill = style.getFill();\n            if (fill) {\n                fill.setColor(color);\n            }\n            var stroke = style.getStroke();\n            if (stroke) {\n                stroke.setColor(color);\n                stroke.setLineDash(null);\n            }\n            style.setText(undefined);\n            var image = originalStyle.getImage();\n            if (image && image.getOpacity() !== 0) {\n                var imgSize = image.getImageSize();\n                if (!imgSize) {\n                    continue;\n                }\n                var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, { alpha: false });\n                var img = imgContext.canvas;\n                imgContext.fillStyle = color;\n                imgContext.fillRect(0, 0, img.width, img.height);\n                style.setImage(new Icon({\n                    img: img,\n                    imgSize: imgSize,\n                    anchor: image.getAnchor(),\n                    anchorXUnits: IconAnchorUnits.PIXELS,\n                    anchorYUnits: IconAnchorUnits.PIXELS,\n                    offset: image.getOrigin(),\n                    opacity: 1,\n                    size: image.getSize(),\n                    scale: image.getScale(),\n                    rotation: image.getRotation(),\n                    rotateWithView: image.getRotateWithView(),\n                }));\n            }\n            var zIndex = style.getZIndex() || 0;\n            var byGeometryType = featuresByZIndex[zIndex];\n            if (!byGeometryType) {\n                byGeometryType = {};\n                featuresByZIndex[zIndex] = byGeometryType;\n                byGeometryType['Polygon'] = [];\n                byGeometryType['Circle'] = [];\n                byGeometryType['LineString'] = [];\n                byGeometryType['Point'] = [];\n            }\n            byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n        }\n    }\n    var zIndexKeys = Object.keys(featuresByZIndex)\n        .map(Number)\n        .sort(numberSafeCompareFunction);\n    for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n        var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n        for (var type in byGeometryType) {\n            var geomAndStyle = byGeometryType[type];\n            for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n                renderer.setStyle(geomAndStyle[j + 1]);\n                for (var k = 0, kk = transforms.length; k < kk; ++k) {\n                    renderer.setTransform(transforms[k]);\n                    renderer.drawGeometry(geomAndStyle[j]);\n                }\n            }\n        }\n    }\n    return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n    var resultFeatures = [];\n    if (imageData) {\n        var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n        var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n        // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n        // for browsers returning coordinates slightly larger than the actual canvas size\n        // due to a non-integer pixel ratio.\n        var index = (clamp(x, 0, imageData.width - 1) +\n            clamp(y, 0, imageData.height - 1) * imageData.width) *\n            4;\n        var r = imageData.data[index];\n        var g = imageData.data[index + 1];\n        var b = imageData.data[index + 2];\n        var i = b + 256 * (g + 256 * r);\n        var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n        if (i && i % indexFactor === 0) {\n            resultFeatures.push(features[i / indexFactor - 1]);\n        }\n    }\n    return resultFeatures;\n}\n//# sourceMappingURL=hitdetect.js.map"]},"metadata":{},"sourceType":"module"}