{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n    /**\n     * @type {ImageData}\n     */\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.declutterExecutorGroup = null;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    _this.clipping = true;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.compositionContext_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.opacity_ = 1;\n    return _this;\n  }\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    var pixelRatio = frameState.pixelRatio;\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    var context = this.compositionContext_;\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    do {\n      var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n    } while (++world < endWorld);\n  };\n  CanvasVectorLayerRenderer.prototype.setupCompositionContext_ = function () {\n    if (this.opacity_ !== 1) {\n      var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  };\n  CanvasVectorLayerRenderer.prototype.releaseCompositionContext_ = function () {\n    if (this.opacity_ !== 1) {\n      var alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  };\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n      this.releaseCompositionContext_();\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    var declutterExecutorGroup = this.declutterExecutorGroup;\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      return null;\n    }\n    // resize and clear\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    this.preRender(context, frameState);\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n    // clipped rendering if layer extent is set\n    var clipped = false;\n    var render = true;\n    if (layerState.extent && this.clipping) {\n      var layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n    this.releaseCompositionContext_();\n    this.postRender(context, frameState);\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  };\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(\n    /**\n     * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (resolve) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        var size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        var center = this.renderedCenter_;\n        var resolution = this.renderedResolution_;\n        var rotation = this.renderedRotation_;\n        var projection = this.renderedProjection_;\n        var extent = this.wrappedRenderedExtent_;\n        var layer = this.getLayer();\n        var transforms = [];\n        var width = size[0] * HIT_DETECT_RESOLUTION;\n        var height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        var source = layer.getSource();\n        var projectionExtent = projection.getExtent();\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          var startX = extent[0];\n          var worldWidth = getWidth(projectionExtent);\n          var world = 0;\n          var offsetX = void 0;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    var _this = this;\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    var layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    var features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    var featureCallback = function (feature, geometry, distanceSq) {\n      var key = getUid(feature);\n      var match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    var result;\n    var executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some(function (executorGroup) {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(function (item) {\n        return item.value;\n      }) : null);\n    });\n    return result;\n  };\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    var center = viewState.center.slice();\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var renderedExtent = extent.slice();\n    var loadExtents = [extent.slice()];\n    var projectionExtent = projection.getExtent();\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      var loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    var declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n    var userProjection = getUserProjection();\n    var userTransform;\n    if (userProjection) {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        var extent_1 = loadExtents[i];\n        var userExtent_1 = toUserExtent(extent_1, projection);\n        vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n    var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    var ready = true;\n    var render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        ready = ready && !dirty;\n      }\n    }.bind(this);\n    var userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n    }\n    return loading;\n  };\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"sources":["../../src/renderer/canvas/VectorLayer.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect, } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString, } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX, } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature, } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution, } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */ (function (_super) {\n    __extends(CanvasVectorLayerRenderer, _super);\n    /**\n     * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n     */\n    function CanvasVectorLayerRenderer(vectorLayer) {\n        var _this = _super.call(this, vectorLayer) || this;\n        /** @private */\n        _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n        /**\n         * @type {boolean}\n         */\n        _this.animatingOrInteracting_;\n        /**\n         * @type {ImageData}\n         */\n        _this.hitDetectionImageData_ = null;\n        /**\n         * @type {Array<import(\"../../Feature.js\").default>}\n         */\n        _this.renderedFeatures_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRevision_ = -1;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedResolution_ = NaN;\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.renderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {import(\"../../extent.js\").Extent}\n         */\n        _this.wrappedRenderedExtent_ = createEmpty();\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.renderedRotation_;\n        /**\n         * @private\n         * @type {import(\"../../coordinate\").Coordinate}\n         */\n        _this.renderedCenter_ = null;\n        /**\n         * @private\n         * @type {import(\"../../proj/Projection\").default}\n         */\n        _this.renderedProjection_ = null;\n        /**\n         * @private\n         * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n         */\n        _this.renderedRenderOrder_ = null;\n        /**\n         * @private\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.replayGroup_ = null;\n        /**\n         * A new replay group had to be created by `prepareFrame()`\n         * @type {boolean}\n         */\n        _this.replayGroupChanged = true;\n        /**\n         * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n         */\n        _this.declutterExecutorGroup = null;\n        /**\n         * Clipping to be performed by `renderFrame()`\n         * @type {boolean}\n         */\n        _this.clipping = true;\n        /**\n         * @private\n         * @type {CanvasRenderingContext2D}\n         */\n        _this.compositionContext_ = null;\n        /**\n         * @private\n         * @type {number}\n         */\n        _this.opacity_ = 1;\n        return _this;\n    }\n    /**\n     * @param {ExecutorGroup} executorGroup Executor group.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n     */\n    CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n        var extent = frameState.extent;\n        var viewState = frameState.viewState;\n        var center = viewState.center;\n        var resolution = viewState.resolution;\n        var projection = viewState.projection;\n        var rotation = viewState.rotation;\n        var projectionExtent = projection.getExtent();\n        var vectorSource = this.getLayer().getSource();\n        var pixelRatio = frameState.pixelRatio;\n        var viewHints = frameState.viewHints;\n        var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n        var context = this.compositionContext_;\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n        var endWorld = multiWorld\n            ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n            : 1;\n        var world = multiWorld\n            ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n            : 0;\n        do {\n            var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n        } while (++world < endWorld);\n    };\n    CanvasVectorLayerRenderer.prototype.setupCompositionContext_ = function () {\n        if (this.opacity_ !== 1) {\n            var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n            this.compositionContext_ = compositionContext;\n        }\n        else {\n            this.compositionContext_ = this.context;\n        }\n    };\n    CanvasVectorLayerRenderer.prototype.releaseCompositionContext_ = function () {\n        if (this.opacity_ !== 1) {\n            var alpha = this.context.globalAlpha;\n            this.context.globalAlpha = this.opacity_;\n            this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n            this.context.globalAlpha = alpha;\n            releaseCanvas(this.compositionContext_);\n            canvasPool.push(this.compositionContext_.canvas);\n            this.compositionContext_ = null;\n        }\n    };\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n        if (this.declutterExecutorGroup) {\n            this.setupCompositionContext_();\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n            this.releaseCompositionContext_();\n        }\n    };\n    /**\n     * Render the layer.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n        var pixelRatio = frameState.pixelRatio;\n        var layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        makeInverse(this.inversePixelTransform, this.pixelTransform);\n        var canvasTransform = transformToString(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        var context = this.context;\n        var canvas = context.canvas;\n        var replayGroup = this.replayGroup_;\n        var declutterExecutorGroup = this.declutterExecutorGroup;\n        if ((!replayGroup || replayGroup.isEmpty()) &&\n            (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n            return null;\n        }\n        // resize and clear\n        var width = Math.round(frameState.size[0] * pixelRatio);\n        var height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) {\n                canvas.style.transform = canvasTransform;\n            }\n        }\n        else if (!this.containerReused) {\n            context.clearRect(0, 0, width, height);\n        }\n        this.preRender(context, frameState);\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        this.opacity_ = layerState.opacity;\n        this.setupCompositionContext_();\n        // clipped rendering if layer extent is set\n        var clipped = false;\n        var render = true;\n        if (layerState.extent && this.clipping) {\n            var layerExtent = fromUserExtent(layerState.extent, projection);\n            render = intersectsExtent(layerExtent, frameState.extent);\n            clipped = render && !containsExtent(layerExtent, frameState.extent);\n            if (clipped) {\n                this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n            }\n        }\n        if (render) {\n            this.renderWorlds(replayGroup, frameState);\n        }\n        if (clipped) {\n            this.compositionContext_.restore();\n        }\n        this.releaseCompositionContext_();\n        this.postRender(context, frameState);\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    };\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n     */\n    CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n        return new Promise(\n        /**\n         * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (resolve) {\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                var size = [this.context.canvas.width, this.context.canvas.height];\n                apply(this.pixelTransform, size);\n                var center = this.renderedCenter_;\n                var resolution = this.renderedResolution_;\n                var rotation = this.renderedRotation_;\n                var projection = this.renderedProjection_;\n                var extent = this.wrappedRenderedExtent_;\n                var layer = this.getLayer();\n                var transforms = [];\n                var width = size[0] * HIT_DETECT_RESOLUTION;\n                var height = size[1] * HIT_DETECT_RESOLUTION;\n                transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n                var source = layer.getSource();\n                var projectionExtent = projection.getExtent();\n                if (source.getWrapX() &&\n                    projection.canWrapX() &&\n                    !containsExtent(projectionExtent, extent)) {\n                    var startX = extent[0];\n                    var worldWidth = getWidth(projectionExtent);\n                    var world = 0;\n                    var offsetX = void 0;\n                    while (startX < projectionExtent[0]) {\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while (startX > projectionExtent[2]) {\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        }.bind(this));\n    };\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n    CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n        var _this = this;\n        if (!this.replayGroup_) {\n            return undefined;\n        }\n        var resolution = frameState.viewState.resolution;\n        var rotation = frameState.viewState.rotation;\n        var layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n        var features = {};\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n         * @param {number} distanceSq The squared distance to the click position\n         * @return {T|undefined} Callback result.\n         */\n        var featureCallback = function (feature, geometry, distanceSq) {\n            var key = getUid(feature);\n            var match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push((features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback,\n                }));\n            }\n            else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        var result;\n        var executorGroups = [this.replayGroup_];\n        if (this.declutterExecutorGroup) {\n            executorGroups.push(this.declutterExecutorGroup);\n        }\n        executorGroups.some(function (executorGroup) {\n            return (result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup &&\n                frameState.declutterTree\n                ? frameState.declutterTree.all().map(function (item) { return item.value; })\n                : null));\n        });\n        return result;\n    };\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n    CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n        var layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) {\n            layer.changed();\n        }\n    };\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n    CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n        this.renderIfReadyAndVisible();\n    };\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n    CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n        var vectorLayer = this.getLayer();\n        var vectorSource = vectorLayer.getSource();\n        if (!vectorSource) {\n            return false;\n        }\n        var animating = frameState.viewHints[ViewHint.ANIMATING];\n        var interacting = frameState.viewHints[ViewHint.INTERACTING];\n        var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if ((this.ready && !updateWhileAnimating && animating) ||\n            (!updateWhileInteracting && interacting)) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        var frameStateExtent = frameState.extent;\n        var viewState = frameState.viewState;\n        var projection = viewState.projection;\n        var resolution = viewState.resolution;\n        var pixelRatio = frameState.pixelRatio;\n        var vectorLayerRevision = vectorLayer.getRevision();\n        var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) {\n            vectorLayerRenderOrder = defaultRenderOrder;\n        }\n        var center = viewState.center.slice();\n        var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        var renderedExtent = extent.slice();\n        var loadExtents = [extent.slice()];\n        var projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            var worldWidth = getWidth(projectionExtent);\n            var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            wrapCoordinateX(center, projection);\n            var loadExtent = wrapExtentX(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] &&\n                loadExtent[2] < projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] + worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] + worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n            else if (loadExtent[0] > projectionExtent[0] &&\n                loadExtent[2] > projectionExtent[2]) {\n                loadExtents.push([\n                    loadExtent[0] - worldWidth,\n                    loadExtent[1],\n                    loadExtent[2] - worldWidth,\n                    loadExtent[3],\n                ]);\n            }\n        }\n        if (this.ready &&\n            this.renderedResolution_ == resolution &&\n            this.renderedRevision_ == vectorLayerRevision &&\n            this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n            containsExtent(this.wrappedRenderedExtent_, extent)) {\n            if (!equals(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        var declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) {\n            declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n        }\n        var userProjection = getUserProjection();\n        var userTransform;\n        if (userProjection) {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                var extent_1 = loadExtents[i];\n                var userExtent_1 = toUserExtent(extent_1, projection);\n                vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n            }\n            userTransform = getTransformFromProjections(userProjection, projection);\n        }\n        else {\n            for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n                vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n            }\n        }\n        var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n        var ready = true;\n        var render = \n        /**\n         * @param {import(\"../../Feature.js\").default} feature Feature.\n         * @this {CanvasVectorLayerRenderer}\n         */\n        function (feature) {\n            var styles;\n            var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) {\n                styles = styleFunction(feature, resolution);\n            }\n            if (styles) {\n                var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                ready = ready && !dirty;\n            }\n        }.bind(this);\n        var userExtent = toUserExtent(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */\n        var features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) {\n            features.sort(vectorLayerRenderOrder);\n        }\n        for (var i = 0, ii = features.length; i < ii; ++i) {\n            render(features[i]);\n        }\n        this.renderedFeatures_ = features;\n        this.ready = ready;\n        var replayGroupInstructions = replayGroup.finish();\n        var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) {\n            this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        }\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    };\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n    CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n        if (!styles) {\n            return false;\n        }\n        var loading = false;\n        if (Array.isArray(styles)) {\n            for (var i = 0, ii = styles.length; i < ii; ++i) {\n                loading =\n                    renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n            }\n        }\n        else {\n            loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n        }\n        return loading;\n    };\n    return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer));\nexport default CanvasVectorLayerRenderer;\n//# sourceMappingURL=VectorLayer.js.map"]},"metadata":{},"sourceType":"module"}