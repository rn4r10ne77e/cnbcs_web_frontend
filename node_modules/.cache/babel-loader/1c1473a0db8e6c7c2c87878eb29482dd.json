{"ast":null,"code":"/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  var theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} [opt_tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  var tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"sources":["src/rotationconstraint.js"],"names":[],"mappings":"AAAA;;AAEG;AACH,SAAQ,SAAS,QAAO,WAAW;AAEnC;;AAEG;AAEH;;;AAGG;AACH,OAAM,SAAU,OAAO,CAAC,QAAQ,EAAA;EAC9B,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,CAAC;GACT,MAAM;IACL,OAAO,SAAS;EACjB;AACH;AAEA;;;AAGG;AACH,OAAM,SAAU,IAAI,CAAC,QAAQ,EAAA;EAC3B,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,QAAQ;GAChB,MAAM;IACL,OAAO,SAAS;EACjB;AACH;AAEA;;;AAGG;AACH,OAAM,SAAU,aAAa,CAAC,CAAC,EAAA;EAC7B,IAAM,KAAK,GAAI,CAAC,GAAG,IAAI,CAAC,EAAE,GAAI,CAAC;EAC/B;IACE;;;;AAIG;IACH,UAAU,QAAQ,EAAE,YAAY,EAAA;MAC9B,IAAI,YAAY,EAAE;QAChB,OAAO,QAAQ;MAChB;MAED,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,KAAK;QACrD,OAAO,QAAQ;OAChB,MAAM;QACL,OAAO,SAAS;MACjB;IACH;EAAC;AAEL;AAEA;;;AAGG;AACH,OAAM,SAAU,gBAAgB,CAAC,aAAa,EAAA;EAC5C,IAAM,SAAS,GAAG,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC;EAC/C;IACE;;;;AAIG;IACH,UAAU,QAAQ,EAAE,YAAY,EAAA;MAC9B,IAAI,YAAY,EAAE;QAChB,OAAO,QAAQ;MAChB;MAED,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAE;UACnC,OAAO,CAAC;SACT,MAAM;UACL,OAAO,QAAQ;QAChB;OACF,MAAM;QACL,OAAO,SAAS;MACjB;IACH;EAAC;AAEL","sourceRoot":"","sourcesContent":["/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n    if (rotation !== undefined) {\n        return 0;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n    if (rotation !== undefined) {\n        return rotation;\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n    var theta = (2 * Math.PI) / n;\n    return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n        if (opt_isMoving) {\n            return rotation;\n        }\n        if (rotation !== undefined) {\n            rotation = Math.floor(rotation / theta + 0.5) * theta;\n            return rotation;\n        }\n        else {\n            return undefined;\n        }\n    });\n}\n/**\n * @param {number} [opt_tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n    var tolerance = opt_tolerance || toRadians(5);\n    return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n        if (opt_isMoving) {\n            return rotation;\n        }\n        if (rotation !== undefined) {\n            if (Math.abs(rotation) <= tolerance) {\n                return 0;\n            }\n            else {\n                return rotation;\n            }\n        }\n        else {\n            return undefined;\n        }\n    });\n}\n//# sourceMappingURL=rotationconstraint.js.map"]},"metadata":{},"sourceType":"module"}