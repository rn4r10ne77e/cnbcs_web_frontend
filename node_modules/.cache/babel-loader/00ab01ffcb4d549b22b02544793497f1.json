{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nvar LRUCache = /** @class */function () {\n  /**\n   * @param {number} [opt_highWaterMark] High water mark.\n   */\n  function LRUCache(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  LRUCache.prototype.canExpireCache = function () {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  };\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  LRUCache.prototype.expireCache = function (keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  LRUCache.prototype.clear = function () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  LRUCache.prototype.containsKey = function (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  LRUCache.prototype.forEach = function (f) {\n    var entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @param {*} [opt_options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  LRUCache.prototype.get = function (key, opt_options) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  LRUCache.prototype.remove = function (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */entry.older;\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */entry.newer;\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n  LRUCache.prototype.getCount = function () {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n  LRUCache.prototype.getKeys = function () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n  LRUCache.prototype.getValues = function () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n  LRUCache.prototype.peekLast = function () {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n  LRUCache.prototype.peekLastKey = function () {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  LRUCache.prototype.peekFirstKey = function () {\n    return this.newest_.key_;\n  };\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  LRUCache.prototype.peek = function (key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n    return this.entries_[key].value_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n  LRUCache.prototype.pop = function () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */entry.newer;\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.replace = function (key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.set = function (key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    var entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  LRUCache.prototype.setSize = function (size) {\n    this.highWaterMark = size;\n  };\n  return LRUCache;\n}();\nexport default LRUCache;","map":{"version":3,"sources":["../src/structs/LRUCache.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nvar LRUCache = /** @class */ (function () {\n    /**\n     * @param {number} [opt_highWaterMark] High water mark.\n     */\n    function LRUCache(opt_highWaterMark) {\n        /**\n         * Desired max cache size after expireCache(). If set to 0, no cache entries\n         * will be pruned at all.\n         * @type {number}\n         */\n        this.highWaterMark =\n            opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n        /**\n         * @private\n         * @type {number}\n         */\n        this.count_ = 0;\n        /**\n         * @private\n         * @type {!Object<string, Entry>}\n         */\n        this.entries_ = {};\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.oldest_ = null;\n        /**\n         * @private\n         * @type {?Entry}\n         */\n        this.newest_ = null;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n    LRUCache.prototype.canExpireCache = function () {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    };\n    /**\n     * Expire the cache.\n     * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n     */\n    LRUCache.prototype.expireCache = function (keep) {\n        while (this.canExpireCache()) {\n            this.pop();\n        }\n    };\n    /**\n     * FIXME empty description for jsdoc\n     */\n    LRUCache.prototype.clear = function () {\n        this.count_ = 0;\n        this.entries_ = {};\n        this.oldest_ = null;\n        this.newest_ = null;\n    };\n    /**\n     * @param {string} key Key.\n     * @return {boolean} Contains key.\n     */\n    LRUCache.prototype.containsKey = function (key) {\n        return this.entries_.hasOwnProperty(key);\n    };\n    /**\n     * @param {function(T, string, LRUCache<T>): ?} f The function\n     *     to call for every entry from the oldest to the newer. This function takes\n     *     3 arguments (the entry value, the entry key and the LRUCache object).\n     *     The return value is ignored.\n     */\n    LRUCache.prototype.forEach = function (f) {\n        var entry = this.oldest_;\n        while (entry) {\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    };\n    /**\n     * @param {string} key Key.\n     * @param {*} [opt_options] Options (reserved for subclasses).\n     * @return {T} Value.\n     */\n    LRUCache.prototype.get = function (key, opt_options) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            return entry.value_;\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n            this.oldest_.older = null;\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    };\n    /**\n     * Remove an entry from the cache.\n     * @param {string} key The entry key.\n     * @return {T} The removed entry.\n     */\n    LRUCache.prototype.remove = function (key) {\n        var entry = this.entries_[key];\n        assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ (entry.older);\n            if (this.newest_) {\n                this.newest_.newer = null;\n            }\n        }\n        else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ (entry.newer);\n            if (this.oldest_) {\n                this.oldest_.older = null;\n            }\n        }\n        else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @return {number} Count.\n     */\n    LRUCache.prototype.getCount = function () {\n        return this.count_;\n    };\n    /**\n     * @return {Array<string>} Keys.\n     */\n    LRUCache.prototype.getKeys = function () {\n        var keys = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            keys[i++] = entry.key_;\n        }\n        return keys;\n    };\n    /**\n     * @return {Array<T>} Values.\n     */\n    LRUCache.prototype.getValues = function () {\n        var values = new Array(this.count_);\n        var i = 0;\n        var entry;\n        for (entry = this.newest_; entry; entry = entry.older) {\n            values[i++] = entry.value_;\n        }\n        return values;\n    };\n    /**\n     * @return {T} Last value.\n     */\n    LRUCache.prototype.peekLast = function () {\n        return this.oldest_.value_;\n    };\n    /**\n     * @return {string} Last key.\n     */\n    LRUCache.prototype.peekLastKey = function () {\n        return this.oldest_.key_;\n    };\n    /**\n     * Get the key of the newest item in the cache.  Throws if the cache is empty.\n     * @return {string} The newest key.\n     */\n    LRUCache.prototype.peekFirstKey = function () {\n        return this.newest_.key_;\n    };\n    /**\n     * Return an entry without updating least recently used time.\n     * @param {string} key Key.\n     * @return {T} Value.\n     */\n    LRUCache.prototype.peek = function (key) {\n        if (!this.containsKey(key)) {\n            return undefined;\n        }\n        return this.entries_[key].value_;\n    };\n    /**\n     * @return {T} value Value.\n     */\n    LRUCache.prototype.pop = function () {\n        var entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) {\n            entry.newer.older = null;\n        }\n        this.oldest_ = /** @type {Entry} */ (entry.newer);\n        if (!this.oldest_) {\n            this.newest_ = null;\n        }\n        --this.count_;\n        return entry.value_;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.replace = function (key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    };\n    /**\n     * @param {string} key Key.\n     * @param {T} value Value.\n     */\n    LRUCache.prototype.set = function (key, value) {\n        assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n        var entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value,\n        };\n        if (!this.newest_) {\n            this.oldest_ = entry;\n        }\n        else {\n            this.newest_.newer = entry;\n        }\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    };\n    /**\n     * Set a maximum number of entries for the cache.\n     * @param {number} size Cache size.\n     * @api\n     */\n    LRUCache.prototype.setSize = function (size) {\n        this.highWaterMark = size;\n    };\n    return LRUCache;\n}());\nexport default LRUCache;\n//# sourceMappingURL=LRUCache.js.map"]},"metadata":{},"sourceType":"module"}