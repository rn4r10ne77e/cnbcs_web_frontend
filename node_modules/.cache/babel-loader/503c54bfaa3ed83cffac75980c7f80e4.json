{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */function () {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  TileRange.prototype.contains = function (tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  TileRange.prototype.containsTileRange = function (tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  };\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  TileRange.prototype.containsXY = function (x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  TileRange.prototype.equals = function (tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  TileRange.prototype.extend = function (tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  };\n  /**\n   * @return {number} Height.\n   */\n  TileRange.prototype.getHeight = function () {\n    return this.maxY - this.minY + 1;\n  };\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  TileRange.prototype.getSize = function () {\n    return [this.getWidth(), this.getHeight()];\n  };\n  /**\n   * @return {number} Width.\n   */\n  TileRange.prototype.getWidth = function () {\n    return this.maxX - this.minX + 1;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  TileRange.prototype.intersects = function (tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  };\n  return TileRange;\n}();\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":{"version":3,"sources":["src/TileRange.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */ (function () {\n    /**\n     * @param {number} minX Minimum X.\n     * @param {number} maxX Maximum X.\n     * @param {number} minY Minimum Y.\n     * @param {number} maxY Maximum Y.\n     */\n    function TileRange(minX, maxX, minY, maxY) {\n        /**\n         * @type {number}\n         */\n        this.minX = minX;\n        /**\n         * @type {number}\n         */\n        this.maxX = maxX;\n        /**\n         * @type {number}\n         */\n        this.minY = minY;\n        /**\n         * @type {number}\n         */\n        this.maxY = maxY;\n    }\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {boolean} Contains tile coordinate.\n     */\n    TileRange.prototype.contains = function (tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n    TileRange.prototype.containsTileRange = function (tileRange) {\n        return (this.minX <= tileRange.minX &&\n            tileRange.maxX <= this.maxX &&\n            this.minY <= tileRange.minY &&\n            tileRange.maxY <= this.maxY);\n    };\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n    TileRange.prototype.containsXY = function (x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n    TileRange.prototype.equals = function (tileRange) {\n        return (this.minX == tileRange.minX &&\n            this.minY == tileRange.minY &&\n            this.maxX == tileRange.maxX &&\n            this.maxY == tileRange.maxY);\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n    TileRange.prototype.extend = function (tileRange) {\n        if (tileRange.minX < this.minX) {\n            this.minX = tileRange.minX;\n        }\n        if (tileRange.maxX > this.maxX) {\n            this.maxX = tileRange.maxX;\n        }\n        if (tileRange.minY < this.minY) {\n            this.minY = tileRange.minY;\n        }\n        if (tileRange.maxY > this.maxY) {\n            this.maxY = tileRange.maxY;\n        }\n    };\n    /**\n     * @return {number} Height.\n     */\n    TileRange.prototype.getHeight = function () {\n        return this.maxY - this.minY + 1;\n    };\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n    TileRange.prototype.getSize = function () {\n        return [this.getWidth(), this.getHeight()];\n    };\n    /**\n     * @return {number} Width.\n     */\n    TileRange.prototype.getWidth = function () {\n        return this.maxX - this.minX + 1;\n    };\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n    TileRange.prototype.intersects = function (tileRange) {\n        return (this.minX <= tileRange.maxX &&\n            this.maxX >= tileRange.minX &&\n            this.minY <= tileRange.maxY &&\n            this.maxY >= tileRange.minY);\n    };\n    return TileRange;\n}());\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    else {\n        return new TileRange(minX, maxX, minY, maxY);\n    }\n}\nexport default TileRange;\n//# sourceMappingURL=TileRange.js.map"]},"metadata":{},"sourceType":"module"}