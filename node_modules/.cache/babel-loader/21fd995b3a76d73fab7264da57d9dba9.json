{"ast":null,"code":"/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport ViewHint from '../../ViewHint.js';\nimport { equals } from '../../array.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { buffer, containsExtent, createEmpty, getHeight, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport RenderEventType from '../../render/EventType.js';\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport ExecutorGroup, { ALL, DECLUTTER, NON_DECLUTTER } from '../../render/canvas/ExecutorGroup.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { getUid } from '../../util.js';\nimport { defaultOrder as defaultRenderOrder, getSquaredTolerance as getSquaredRenderTolerance, getTolerance as getRenderTolerance, renderFeature } from '../vector.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @private\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.clipped_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedPixelRatio_ = 1;\n\n    /**\n     * @private\n     * @type {import(\"../../render.js\").OrderFunction|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedFrameDeclutter_;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.targetContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\n   *     `false` to only render non-declutterable items, `undefined` to render all.\n   */\n  renderWorlds(executorGroup, frameState, declutterable) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const declutter = this.getLayer().getDeclutter();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    const context = this.context;\n    const width = Math.round(getWidth(extent) / resolution * pixelRatio);\n    const height = Math.round(getHeight(extent) / resolution * pixelRatio);\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    do {\n      let transform = this.getRenderTransform(center, resolution, 0, pixelRatio, width, height, world * worldWidth);\n      if (frameState.declutter) {\n        transform = transform.slice(0);\n      }\n      executorGroup.execute(context, [context.canvas.width, context.canvas.height], transform, rotation, snapToPixel, declutterable === undefined ? ALL : declutterable ? DECLUTTER : NON_DECLUTTER, declutterable ? declutter && frameState.declutter[declutter] : undefined);\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @private\n   */\n  setDrawContext_() {\n    if (this.opacity_ !== 1) {\n      this.targetContext_ = this.context;\n      this.context = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetDrawContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.targetContext_.globalAlpha;\n      this.targetContext_.globalAlpha = this.opacity_;\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\n      this.targetContext_.globalAlpha = alpha;\n      releaseCanvas(this.context);\n      canvasPool.push(this.context.canvas);\n      this.context = this.targetContext_;\n      this.targetContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\n      return;\n    }\n    this.renderWorlds(this.replayGroup_, frameState, true);\n  }\n\n  /**\n   * Render deferred instructions.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferredInternal(frameState) {\n    if (!this.replayGroup_) {\n      return;\n    }\n    this.replayGroup_.renderDeferred();\n    if (this.clipped_) {\n      this.context.restore();\n    }\n    this.resetDrawContext_();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    this.opacity_ = layerState.opacity;\n    const viewState = frameState.viewState;\n    this.prepareContainer(frameState, target);\n    const context = this.context;\n    const replayGroup = this.replayGroup_;\n    let render = replayGroup && !replayGroup.isEmpty();\n    if (!render) {\n      const hasRenderListeners = this.getLayer().hasListener(RenderEventType.PRERENDER) || this.getLayer().hasListener(RenderEventType.POSTRENDER);\n      if (!hasRenderListeners) {\n        return this.container;\n      }\n    }\n    this.setDrawContext_();\n    this.preRender(context, frameState);\n    const projection = viewState.projection;\n\n    // clipped rendering if layer extent is set\n    this.clipped_ = false;\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\n      if (this.clipped_) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n    if (render) {\n      this.renderWorlds(replayGroup, frameState, this.getLayer().getDeclutter() ? false : undefined);\n    }\n    if (!frameState.declutter && this.clipped_) {\n      context.restore();\n    }\n    this.postRender(context, frameState);\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    if (!frameState.declutter) {\n      this.resetDrawContext_();\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    return new Promise(resolve => {\n      if (this.frameState && !this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = this.frameState.size.slice();\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n        const userProjection = getUserProjection();\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation, getSquaredRenderTolerance(resolution, this.renderedPixelRatio_), userProjection ? projection : null);\n      }\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    const declutter = this.getLayer().getDeclutter();\n    return this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, declutter ? frameState.declutter?.[declutter]?.all().map(item => item.value) : null);\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    const center = viewState.center.slice();\n    const extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && this.renderedFrameDeclutter_ === !!frameState.declutter && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    const replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(userExtent, toUserResolution(resolution, projection), userProjection);\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} index Index.\n     */\n    (feature, index) => {\n      let styles;\n      const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, this.getLayer().getDeclutter(), index);\n        ready = ready && !dirty;\n      }\n    };\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i], i);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer(), !!frameState.declutter);\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.renderedPixelRatio_ = pixelRatio;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutter, index) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutter, index);\n    }\n    return loading;\n  }\n}\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["ViewHint","equals","wrapX","wrapCoordinateX","createCanvasContext2D","releaseCanvas","buffer","containsExtent","createEmpty","getHeight","getWidth","intersects","intersectsExtent","wrapExtentX","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","RenderEventType","CanvasBuilderGroup","ExecutorGroup","ALL","DECLUTTER","NON_DECLUTTER","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","getUid","defaultOrder","defaultRenderOrder","getSquaredTolerance","getSquaredRenderTolerance","getTolerance","getRenderTolerance","renderFeature","CanvasLayerRenderer","canvasPool","CanvasVectorLayerRenderer","constructor","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","hitDetectionImageData_","clipped_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedPixelRatio_","renderedRenderOrder_","renderedFrameDeclutter_","replayGroup_","replayGroupChanged","clipping","targetContext_","opacity_","renderWorlds","executorGroup","frameState","declutterable","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","declutter","getDeclutter","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","slice","execute","canvas","undefined","setDrawContext_","resetDrawContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","renderDeferredInternal","renderDeferred","restore","renderFrame","target","layerState","layerStatesArray","layerIndex","opacity","prepareContainer","replayGroup","render","isEmpty","hasRenderListeners","hasListener","PRERENDER","POSTRENDER","container","preRender","layerExtent","clipUnrotated","postRender","getFeatures","pixel","Promise","resolve","size","layer","transforms","source","startX","offsetX","userProjection","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","userTransform","i","ii","length","userExtent","loadFeatures","squaredTolerance","index","styles","styleFunction","dirty","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","loading","Array","isArray"],"sources":["C:/prj/cnbcs_web_frontend/node_modules/ol/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport ViewHint from '../../ViewHint.js';\nimport {equals} from '../../array.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getHeight,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport RenderEventType from '../../render/EventType.js';\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport ExecutorGroup, {\n  ALL,\n  DECLUTTER,\n  NON_DECLUTTER,\n} from '../../render/canvas/ExecutorGroup.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {getUid} from '../../util.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  getTolerance as getRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @private\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.clipped_ = false;\n\n    /**\n     * @private\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedPixelRatio_ = 1;\n\n    /**\n     * @private\n     * @type {import(\"../../render.js\").OrderFunction|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedFrameDeclutter_;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.targetContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {boolean} [declutterable] `true` to only render declutterable items,\n   *     `false` to only render non-declutterable items, `undefined` to render all.\n   */\n  renderWorlds(executorGroup, frameState, declutterable) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const declutter = this.getLayer().getDeclutter();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.context;\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      let transform = this.getRenderTransform(\n        center,\n        resolution,\n        0,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth,\n      );\n      if (frameState.declutter) {\n        transform = transform.slice(0);\n      }\n      executorGroup.execute(\n        context,\n        [context.canvas.width, context.canvas.height],\n        transform,\n        rotation,\n        snapToPixel,\n        declutterable === undefined\n          ? ALL\n          : declutterable\n            ? DECLUTTER\n            : NON_DECLUTTER,\n        declutterable\n          ? declutter && frameState.declutter[declutter]\n          : undefined,\n      );\n    } while (++world < endWorld);\n  }\n\n  /**\n   * @private\n   */\n  setDrawContext_() {\n    if (this.opacity_ !== 1) {\n      this.targetContext_ = this.context;\n      this.context = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool,\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetDrawContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.targetContext_.globalAlpha;\n      this.targetContext_.globalAlpha = this.opacity_;\n      this.targetContext_.drawImage(this.context.canvas, 0, 0);\n      this.targetContext_.globalAlpha = alpha;\n      releaseCanvas(this.context);\n      canvasPool.push(this.context.canvas);\n      this.context = this.targetContext_;\n      this.targetContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!this.replayGroup_ || !this.getLayer().getDeclutter()) {\n      return;\n    }\n    this.renderWorlds(this.replayGroup_, frameState, true);\n  }\n\n  /**\n   * Render deferred instructions.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @override\n   */\n  renderDeferredInternal(frameState) {\n    if (!this.replayGroup_) {\n      return;\n    }\n    this.replayGroup_.renderDeferred();\n    if (this.clipped_) {\n      this.context.restore();\n    }\n    this.resetDrawContext_();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   * @override\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    this.opacity_ = layerState.opacity;\n    const viewState = frameState.viewState;\n\n    this.prepareContainer(frameState, target);\n    const context = this.context;\n\n    const replayGroup = this.replayGroup_;\n    let render = replayGroup && !replayGroup.isEmpty();\n    if (!render) {\n      const hasRenderListeners =\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\n      if (!hasRenderListeners) {\n        return this.container;\n      }\n    }\n\n    this.setDrawContext_();\n\n    this.preRender(context, frameState);\n\n    const projection = viewState.projection;\n\n    // clipped rendering if layer extent is set\n    this.clipped_ = false;\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      this.clipped_ = render && !containsExtent(layerExtent, frameState.extent);\n      if (this.clipped_) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(\n        replayGroup,\n        frameState,\n        this.getLayer().getDeclutter() ? false : undefined,\n      );\n    }\n\n    if (!frameState.declutter && this.clipped_) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    if (!frameState.declutter) {\n      this.resetDrawContext_();\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   * @override\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (\n        this.frameState &&\n        !this.hitDetectionImageData_ &&\n        !this.animatingOrInteracting_\n      ) {\n        const size = this.frameState.size.slice();\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0,\n          ).slice(),\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX,\n              ).slice(),\n            );\n            startX -= worldWidth;\n          }\n        }\n        const userProjection = getUserProjection();\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation,\n          getSquaredRenderTolerance(resolution, this.renderedPixelRatio_),\n          userProjection ? projection : null,\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_),\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   * @override\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches,\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          }),\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    const declutter = this.getLayer().getDeclutter();\n    return this.replayGroup_.forEachFeatureAtCoordinate(\n      coordinate,\n      resolution,\n      rotation,\n      hitTolerance,\n      featureCallback,\n      declutter\n        ? frameState.declutter?.[declutter]?.all().map((item) => item.value)\n        : null,\n    );\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @override\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @override\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution,\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      this.renderedFrameDeclutter_ === !!frameState.declutter &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio,\n    );\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection,\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @param {number} index Index.\n       */\n      (feature, index) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            this.getLayer().getDeclutter(),\n            index,\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i], i);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer(),\n      !!frameState.declutter,\n    );\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedFrameDeclutter_ = !!frameState.declutter;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.renderedPixelRatio_ = pixelRatio;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {boolean} [declutter] Enable decluttering.\n   * @param {number} [index] Render order index.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutter,\n    index,\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutter,\n            index,\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutter,\n        index,\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}