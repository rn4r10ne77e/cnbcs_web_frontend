{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the icon.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /** @class */function (_super) {\n  __extends(Icon, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Icon(opt_options) {\n    var _this = this;\n    var options = opt_options || {};\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    }) || this;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.normalizedAnchor_ = null;\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    _this.imgSize_ = options.imgSize;\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && _this.imgSize_, 5); // `imgSize` must be set when `image` is provided\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    _this.iconImage_ = getIconImage(image, /** @type {string} */src, _this.imgSize_ !== undefined ? _this.imgSize_ : null, _this.crossOrigin_, imageState, _this.color_);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = options.size !== undefined ? options.size : null;\n    return _this;\n  }\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  Icon.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      imgSize: this.imgSize_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  Icon.prototype.getAnchor = function () {\n    var anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      var size = this.getSize();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n          anchor[1] *= size[1];\n        }\n      }\n      if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    var displacement = this.getDisplacement();\n    return [anchor[0] - displacement[0], anchor[1] + displacement[1]];\n  };\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  Icon.prototype.setAnchor = function (anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  Icon.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  Icon.prototype.getImage = function (pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  Icon.prototype.getPixelRatio = function (pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  Icon.prototype.getImageSize = function () {\n    return this.iconImage_.getSize();\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  Icon.prototype.getImageState = function () {\n    return this.iconImage_.getImageState();\n  };\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  Icon.prototype.getHitDetectionImage = function () {\n    return this.iconImage_.getHitDetectionImage();\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  Icon.prototype.getOrigin = function () {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    var offset = this.offset_;\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  };\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  Icon.prototype.getSrc = function () {\n    return this.iconImage_.getSrc();\n  };\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  Icon.prototype.getSize = function () {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  Icon.prototype.listenImageChange = function (listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  };\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  Icon.prototype.load = function () {\n    this.iconImage_.load();\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  Icon.prototype.unlistenImageChange = function (listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  };\n  return Icon;\n}(ImageStyle);\nexport default Icon;","map":{"version":3,"sources":["../src/style/Icon.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the icon.\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /** @class */ (function (_super) {\n    __extends(Icon, _super);\n    /**\n     * @param {Options} [opt_options] Options.\n     */\n    function Icon(opt_options) {\n        var _this = this;\n        var options = opt_options || {};\n        /**\n         * @type {number}\n         */\n        var opacity = options.opacity !== undefined ? options.opacity : 1;\n        /**\n         * @type {number}\n         */\n        var rotation = options.rotation !== undefined ? options.rotation : 0;\n        /**\n         * @type {number|import(\"../size.js\").Size}\n         */\n        var scale = options.scale !== undefined ? options.scale : 1;\n        /**\n         * @type {boolean}\n         */\n        var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        _this = _super.call(this, {\n            opacity: opacity,\n            rotation: rotation,\n            scale: scale,\n            displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n            rotateWithView: rotateWithView,\n            declutterMode: options.declutterMode,\n        }) || this;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.normalizedAnchor_ = null;\n        /**\n         * @private\n         * @type {import(\"./IconOrigin.js\").default}\n         */\n        _this.anchorOrigin_ =\n            options.anchorOrigin !== undefined\n                ? options.anchorOrigin\n                : IconOrigin.TOP_LEFT;\n        /**\n         * @private\n         * @type {import(\"./IconAnchorUnits.js\").default}\n         */\n        _this.anchorXUnits_ =\n            options.anchorXUnits !== undefined\n                ? options.anchorXUnits\n                : IconAnchorUnits.FRACTION;\n        /**\n         * @private\n         * @type {import(\"./IconAnchorUnits.js\").default}\n         */\n        _this.anchorYUnits_ =\n            options.anchorYUnits !== undefined\n                ? options.anchorYUnits\n                : IconAnchorUnits.FRACTION;\n        /**\n         * @private\n         * @type {?string}\n         */\n        _this.crossOrigin_ =\n            options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n         * @type {HTMLImageElement|HTMLCanvasElement}\n         */\n        var image = options.img !== undefined ? options.img : null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size|undefined}\n         */\n        _this.imgSize_ = options.imgSize;\n        /**\n         * @type {string|undefined}\n         */\n        var src = options.src;\n        assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n        assert(!image || (image && _this.imgSize_), 5); // `imgSize` must be set when `image` is provided\n        if ((src === undefined || src.length === 0) && image) {\n            src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n        }\n        assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n        /**\n         * @type {import(\"../ImageState.js\").default}\n         */\n        var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n        /**\n         * @private\n         * @type {import(\"../color.js\").Color}\n         */\n        _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n        /**\n         * @private\n         * @type {import(\"./IconImage.js\").default}\n         */\n        _this.iconImage_ = getIconImage(image, \n        /** @type {string} */ (src), _this.imgSize_ !== undefined ? _this.imgSize_ : null, _this.crossOrigin_, imageState, _this.color_);\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n        /**\n         * @private\n         * @type {import(\"./IconOrigin.js\").default}\n         */\n        _this.offsetOrigin_ =\n            options.offsetOrigin !== undefined\n                ? options.offsetOrigin\n                : IconOrigin.TOP_LEFT;\n        /**\n         * @private\n         * @type {Array<number>}\n         */\n        _this.origin_ = null;\n        /**\n         * @private\n         * @type {import(\"../size.js\").Size}\n         */\n        _this.size_ = options.size !== undefined ? options.size : null;\n        return _this;\n    }\n    /**\n     * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n     * @return {Icon} The cloned style.\n     * @api\n     */\n    Icon.prototype.clone = function () {\n        var scale = this.getScale();\n        return new Icon({\n            anchor: this.anchor_.slice(),\n            anchorOrigin: this.anchorOrigin_,\n            anchorXUnits: this.anchorXUnits_,\n            anchorYUnits: this.anchorYUnits_,\n            color: this.color_ && this.color_.slice\n                ? this.color_.slice()\n                : this.color_ || undefined,\n            crossOrigin: this.crossOrigin_,\n            imgSize: this.imgSize_,\n            offset: this.offset_.slice(),\n            offsetOrigin: this.offsetOrigin_,\n            opacity: this.getOpacity(),\n            rotateWithView: this.getRotateWithView(),\n            rotation: this.getRotation(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            size: this.size_ !== null ? this.size_.slice() : undefined,\n            src: this.getSrc(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode(),\n        });\n    };\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n    Icon.prototype.getAnchor = function () {\n        var anchor = this.normalizedAnchor_;\n        if (!anchor) {\n            anchor = this.anchor_;\n            var size = this.getSize();\n            if (this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n                this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n                if (!size) {\n                    return null;\n                }\n                anchor = this.anchor_.slice();\n                if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n                    anchor[0] *= size[0];\n                }\n                if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n                    anchor[1] *= size[1];\n                }\n            }\n            if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n                if (!size) {\n                    return null;\n                }\n                if (anchor === this.anchor_) {\n                    anchor = this.anchor_.slice();\n                }\n                if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n                    this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n                    anchor[0] = -anchor[0] + size[0];\n                }\n                if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n                    this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n                    anchor[1] = -anchor[1] + size[1];\n                }\n            }\n            this.normalizedAnchor_ = anchor;\n        }\n        var displacement = this.getDisplacement();\n        return [anchor[0] - displacement[0], anchor[1] + displacement[1]];\n    };\n    /**\n     * Set the anchor point. The anchor determines the center point for the\n     * symbolizer.\n     *\n     * @param {Array<number>} anchor Anchor.\n     * @api\n     */\n    Icon.prototype.setAnchor = function (anchor) {\n        this.anchor_ = anchor;\n        this.normalizedAnchor_ = null;\n    };\n    /**\n     * Get the icon color.\n     * @return {import(\"../color.js\").Color} Color.\n     * @api\n     */\n    Icon.prototype.getColor = function () {\n        return this.color_;\n    };\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n    Icon.prototype.getImage = function (pixelRatio) {\n        return this.iconImage_.getImage(pixelRatio);\n    };\n    /**\n     * Get the pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} The pixel ratio of the image.\n     * @api\n     */\n    Icon.prototype.getPixelRatio = function (pixelRatio) {\n        return this.iconImage_.getPixelRatio(pixelRatio);\n    };\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n    Icon.prototype.getImageSize = function () {\n        return this.iconImage_.getSize();\n    };\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n    Icon.prototype.getImageState = function () {\n        return this.iconImage_.getImageState();\n    };\n    /**\n     * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n     */\n    Icon.prototype.getHitDetectionImage = function () {\n        return this.iconImage_.getHitDetectionImage();\n    };\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n    Icon.prototype.getOrigin = function () {\n        if (this.origin_) {\n            return this.origin_;\n        }\n        var offset = this.offset_;\n        if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n            var size = this.getSize();\n            var iconImageSize = this.iconImage_.getSize();\n            if (!size || !iconImageSize) {\n                return null;\n            }\n            offset = offset.slice();\n            if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n                this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n                offset[0] = iconImageSize[0] - size[0] - offset[0];\n            }\n            if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n                this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n                offset[1] = iconImageSize[1] - size[1] - offset[1];\n            }\n        }\n        this.origin_ = offset;\n        return this.origin_;\n    };\n    /**\n     * Get the image URL.\n     * @return {string|undefined} Image src.\n     * @api\n     */\n    Icon.prototype.getSrc = function () {\n        return this.iconImage_.getSrc();\n    };\n    /**\n     * Get the size of the icon (in pixels).\n     * @return {import(\"../size.js\").Size} Image size.\n     * @api\n     */\n    Icon.prototype.getSize = function () {\n        return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    Icon.prototype.listenImageChange = function (listener) {\n        this.iconImage_.addEventListener(EventType.CHANGE, listener);\n    };\n    /**\n     * Load not yet loaded URI.\n     * When rendering a feature with an icon style, the vector renderer will\n     * automatically call this method. However, you might want to call this\n     * method yourself for preloading or other purposes.\n     * @api\n     */\n    Icon.prototype.load = function () {\n        this.iconImage_.load();\n    };\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n    Icon.prototype.unlistenImageChange = function (listener) {\n        this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n    };\n    return Icon;\n}(ImageStyle));\nexport default Icon;\n//# sourceMappingURL=Icon.js.map"]},"metadata":{},"sourceType":"module"}