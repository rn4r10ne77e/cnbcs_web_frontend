{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */function (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<import(\"../Feature\").FeatureLike>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   */\n  function ModifyEvent(type, features, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @api\n     */\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n  return ModifyEvent;\n}(Event);\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */function (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function Modify(options) {\n    var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */options) || this;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {ModifyOnSignature<void>}\n     */\n    _this.un;\n    /** @private */\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature<Point>}\n     * @private\n     */\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {Collection<import(\"../Feature\").FeatureLike>}\n     * @private\n     */\n    _this.featuresBeingModified_ = null;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    _this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    _this.source_ = null;\n    /**\n     * @type {boolean|import(\"../layer/BaseVector\").default}\n     */\n    _this.hitDetection_ = null;\n    var features;\n    if (options.features) {\n      features = options.features;\n    } else if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features, a source or a layer');\n    }\n    if (options.hitDetection) {\n      _this.hitDetection_ = options.hitDetection;\n    }\n    /**\n     * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n     * @private\n     */\n    _this.features_ = features;\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    _this.lastPointerEvent_ = null;\n    /**\n     * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n     * @type {Array<number>}\n     */\n    _this.delta_ = [0, 0];\n    /**\n     * @private\n     */\n    _this.snapToPointer_ = options.snapToPointer === undefined ? !_this.hitDetection_ : options.snapToPointer;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n   * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n    if (!this.featuresBeingModified_) {\n      this.featuresBeingModified_ = new Collection();\n      var features = this.featuresBeingModified_.getArray();\n      for (var i = 0, ii = segments.length; i < ii; ++i) {\n        var segment = segments[i];\n        for (var s = 0, ss = segment.length; s < ss; ++s) {\n          var feature = segment[s].feature;\n          if (feature && features.indexOf(feature) === -1) {\n            this.featuresBeingModified_.push(feature);\n          }\n        }\n      }\n      if (this.featuresBeingModified_.getLength() === 0) {\n        this.featuresBeingModified_ = null;\n      } else {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of candidate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders the modification point or vertex to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_(/** @type {Feature} */evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = /** @type {Feature} */evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry;\n    var userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle(/** @type {import(\"../geom/Circle.js\").default} */circleGeometry).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n   * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    vertexFeature.set('features', features);\n    vertexFeature.set('geometries', geometries);\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt, this.dragSegments_);\n    var vertex = [evt.coordinate[0] + this.delta_[0], evt.coordinate[1] + this.delta_[1]];\n    var features = [];\n    var geometries = [];\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var feature = segmentData.feature;\n      if (features.indexOf(feature) === -1) {\n        features.push(feature);\n      }\n      var geometry = segmentData.geometry;\n      if (geometries.indexOf(geometry) === -1) {\n        geometries.push(geometry);\n      }\n      var depth = segmentData.depth;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case 'Point':\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'MultiPoint':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case 'LineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiLineString':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Polygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'MultiPolygon':\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case 'Circle':\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            var userProjection = getUserProjection();\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex, features, geometries);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.featuresBeingModified_ = null;\n    var vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === 'Circle' && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          if (componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            var coordinates = segmentDataMatch.geometry.getCoordinates();\n            switch (segmentDataMatch.geometry.getType()) {\n              // prevent dragging closed linestrings by the connecting node\n              case 'LineString':\n              case 'MultiLineString':\n                continue;\n              // if dragging the first vertex of a polygon, ensure the other segment\n              // belongs to the closing vertex of the linear ring\n              case 'MultiPolygon':\n                coordinates = coordinates[depth[1]];\n              /* falls through */\n              case 'Polygon':\n                if (segmentDataMatch.index !== coordinates[depth[0]].length - 2) {\n                  continue;\n                }\n                break;\n              default:\n              // pass\n            }\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push(segmentDataMatch);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt, [insertVertices]);\n      }\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_(insertVertices[j], vertex);\n      }\n    }\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n      if (geometry.getType() === 'Circle') {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.featuresBeingModified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      this.featuresBeingModified_ = null;\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var _this = this;\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    /** @type {Array<SegmentData>|undefined} */\n    var nodes;\n    var hitPointGeometry;\n    if (this.hitDetection_) {\n      var layerFilter = typeof this.hitDetection_ === 'object' ? function (layer) {\n        return layer === _this.hitDetection_;\n      } : undefined;\n      map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n        geometry = geometry || (/** @type {import(\"../geom/SimpleGeometry\").default} */feature.getGeometry());\n        if (geometry.getType() === 'Point' && includes(_this.features_.getArray(), feature)) {\n          hitPointGeometry = geometry;\n          var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n          nodes = [{\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinate, coordinate]\n          }];\n        }\n        return true;\n      }, {\n        layerFilter: layerFilter\n      });\n    }\n    if (!nodes) {\n      var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n      var buffer = map.getView().getResolution() * this.pixelTolerance_;\n      var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n      nodes = this.rBush_.getInExtent(box);\n    }\n    if (nodes && nodes.length > 0) {\n      var node = nodes.sort(sortByDistance)[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n      if (hitPointGeometry || dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        vertexSegments[getUid(closestSegment)] = true;\n        if (!this.snapToPointer_) {\n          this.delta_[0] = vertex[0] - pixelCoordinate[0];\n          this.delta_[1] = vertex[1] - pixelCoordinate[1];\n        }\n        if (node.geometry.getType() === 'Circle' && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n          var geometries = {};\n          geometries[getUid(node.geometry)] = true;\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              var geometryUid = getUid(nodes[i].geometry);\n              if (!(geometryUid in geometries)) {\n                geometries[geometryUid] = true;\n                vertexSegments[getUid(segment)] = true;\n              }\n            } else {\n              break;\n            }\n          }\n        }\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case 'MultiLineString':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'Polygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'MultiPolygon':\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case 'LineString':\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt, this.dragSegments_);\n      var removed = this.removeVertex_();\n      if (this.featuresBeingModified_) {\n        this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n      }\n      this.featuresBeingModified_ = null;\n      return removed;\n    }\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case 'MultiLineString':\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'LineString':\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case 'MultiPolygon':\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case 'Polygon':\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle') {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n      }\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === 'Circle' && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n    }\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style['Point'];\n  };\n}\nexport default Modify;","map":{"version":3,"sources":["../src/interaction/Modify.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick, } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent, } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment, } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals, includes } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent, } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n    /**\n     * Triggered upon feature modification start\n     * @event ModifyEvent#modifystart\n     * @api\n     */\n    MODIFYSTART: 'modifystart',\n    /**\n     * Triggered upon feature modification end\n     * @event ModifyEvent#modifyend\n     * @api\n     */\n    MODIFYEND: 'modifyend',\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth] Depth.\n * @property {import(\"../Feature\").FeatureLike} feature Feature.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} [index] Index.\n * @property {Array<Array<number>>} segment Segment.\n * @property {Array<SegmentData>} [featureSegments] FeatureSegments.\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition.primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition.singleClick} with\n * {@link module:ol/events/condition.altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition.always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the modification point or vertex. For linestrings and polygons, this will\n * be the affected vertex, for circles a point along the circle, and for points the actual\n * point. If not configured, the default edit style is used (see {@link module:ol/style/Style~Style}).\n * When using a style function, the point feature passed to the function will have a `features`\n * property - an array whose entries are the features that are being modified, and a `geometries`\n * property - an array whose entries are the geometries that are being modified. Both arrays are\n * in the same order. The `geometries` are only useful when modifying geometry collections, where\n * the geometry will be the particular geometry from the collection that is being modified.\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the `features` option.\n * @property {boolean|import(\"../layer/BaseVector\").default} [hitDetection] When configured, point\n * features will be considered for modification based on their visual appearance, instead of being within\n * the `pixelTolerance` from the pointer location. When a {@link module:ol/layer/BaseVector~BaseVectorLayer} is\n * provided, only the rendered representation of the features on that layer will be considered.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the `source` option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {boolean} [snapToPointer=!hitDetection] The vertex, point or segment being modified snaps to the\n * pointer coordinate when clicked within the `pixelTolerance`.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */ (function (_super) {\n    __extends(ModifyEvent, _super);\n    /**\n     * @param {ModifyEventType} type Type.\n     * @param {Collection<import(\"../Feature\").FeatureLike>} features\n     * The features modified.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent\n     * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n     */\n    function ModifyEvent(type, features, mapBrowserEvent) {\n        var _this = _super.call(this, type) || this;\n        /**\n         * The features being modified.\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @api\n         */\n        _this.features = features;\n        /**\n         * Associated {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @api\n         */\n        _this.mapBrowserEvent = mapBrowserEvent;\n        return _this;\n    }\n    return ModifyEvent;\n}(Event));\nexport { ModifyEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'modifyend'|'modifystart', ModifyEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'modifyend'|'modifystart', Return>} ModifyOnSignature\n */\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * Cartesian distance from the pointer is used to determine the features that\n * will be modified. This means that geometries will only be considered for\n * modification when they are within the configured `pixelTolerance`. For point\n * geometries, the `hitDetection` option can be used to match their visual\n * appearance.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */ (function (_super) {\n    __extends(Modify, _super);\n    /**\n     * @param {Options} options Options.\n     */\n    function Modify(options) {\n        var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */ (options)) || this;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.on;\n        /***\n         * @type {ModifyOnSignature<import(\"../events\").EventsKey>}\n         */\n        _this.once;\n        /***\n         * @type {ModifyOnSignature<void>}\n         */\n        _this.un;\n        /** @private */\n        _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n        /**\n         * @private\n         * @type {import(\"../events/condition.js\").Condition}\n         */\n        _this.condition_ = options.condition ? options.condition : primaryAction;\n        /**\n         * @private\n         * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n         * @return {boolean} Combined condition result.\n         */\n        _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n            return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n        };\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.deleteCondition_ = options.deleteCondition\n            ? options.deleteCondition\n            : _this.defaultDeleteCondition_;\n        /**\n         * @type {import(\"../events/condition.js\").Condition}\n         * @private\n         */\n        _this.insertVertexCondition_ = options.insertVertexCondition\n            ? options.insertVertexCondition\n            : always;\n        /**\n         * Editing vertex.\n         * @type {Feature<Point>}\n         * @private\n         */\n        _this.vertexFeature_ = null;\n        /**\n         * Segments intersecting {@link this.vertexFeature_} by segment uid.\n         * @type {Object<string, boolean>}\n         * @private\n         */\n        _this.vertexSegments_ = null;\n        /**\n         * @type {import(\"../pixel.js\").Pixel}\n         * @private\n         */\n        _this.lastPixel_ = [0, 0];\n        /**\n         * Tracks if the next `singleclick` event should be ignored to prevent\n         * accidental deletion right after vertex creation.\n         * @type {boolean}\n         * @private\n         */\n        _this.ignoreNextSingleClick_ = false;\n        /**\n         * @type {Collection<import(\"../Feature\").FeatureLike>}\n         * @private\n         */\n        _this.featuresBeingModified_ = null;\n        /**\n         * Segment RTree for each layer\n         * @type {RBush<SegmentData>}\n         * @private\n         */\n        _this.rBush_ = new RBush();\n        /**\n         * @type {number}\n         * @private\n         */\n        _this.pixelTolerance_ =\n            options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n        /**\n         * @type {boolean}\n         * @private\n         */\n        _this.snappedToVertex_ = false;\n        /**\n         * Indicate whether the interaction is currently changing a feature's\n         * coordinates.\n         * @type {boolean}\n         * @private\n         */\n        _this.changingFeature_ = false;\n        /**\n         * @type {Array}\n         * @private\n         */\n        _this.dragSegments_ = [];\n        /**\n         * Draw overlay where sketch features are drawn.\n         * @type {VectorLayer}\n         * @private\n         */\n        _this.overlay_ = new VectorLayer({\n            source: new VectorSource({\n                useSpatialIndex: false,\n                wrapX: !!options.wrapX,\n            }),\n            style: options.style ? options.style : getDefaultStyleFunction(),\n            updateWhileAnimating: true,\n            updateWhileInteracting: true,\n        });\n        /**\n         * @const\n         * @private\n         * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n         */\n        _this.SEGMENT_WRITERS_ = {\n            'Point': _this.writePointGeometry_.bind(_this),\n            'LineString': _this.writeLineStringGeometry_.bind(_this),\n            'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n            'Polygon': _this.writePolygonGeometry_.bind(_this),\n            'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n            'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n            'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n            'Circle': _this.writeCircleGeometry_.bind(_this),\n            'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this),\n        };\n        /**\n         * @type {VectorSource}\n         * @private\n         */\n        _this.source_ = null;\n        /**\n         * @type {boolean|import(\"../layer/BaseVector\").default}\n         */\n        _this.hitDetection_ = null;\n        var features;\n        if (options.features) {\n            features = options.features;\n        }\n        else if (options.source) {\n            _this.source_ = options.source;\n            features = new Collection(_this.source_.getFeatures());\n            _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n            _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n        }\n        if (!features) {\n            throw new Error('The modify interaction requires features, a source or a layer');\n        }\n        if (options.hitDetection) {\n            _this.hitDetection_ = options.hitDetection;\n        }\n        /**\n         * @type {Collection<import(\"../Feature.js\").FeatureLike>}\n         * @private\n         */\n        _this.features_ = features;\n        _this.features_.forEach(_this.addFeature_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n        _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n        /**\n         * @type {import(\"../MapBrowserEvent.js\").default}\n         * @private\n         */\n        _this.lastPointerEvent_ = null;\n        /**\n         * Delta (x, y in map units) between matched rtree vertex and pointer vertex.\n         * @type {Array<number>}\n         */\n        _this.delta_ = [0, 0];\n        /**\n         * @private\n         */\n        _this.snapToPointer_ =\n            options.snapToPointer === undefined\n                ? !_this.hitDetection_\n                : options.snapToPointer;\n        return _this;\n    }\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.addFeature_ = function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry) {\n            var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n            if (writer) {\n                writer(feature, geometry);\n            }\n        }\n        var map = this.getMap();\n        if (map && map.isRendered() && this.getActive()) {\n            this.handlePointerAtPixel_(this.lastPixel_, map);\n        }\n        feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event.\n     * @param {Array<Array<SegmentData>>} segments The segments subject to modification.\n     * @private\n     */\n    Modify.prototype.willModifyFeatures_ = function (evt, segments) {\n        if (!this.featuresBeingModified_) {\n            this.featuresBeingModified_ = new Collection();\n            var features = this.featuresBeingModified_.getArray();\n            for (var i = 0, ii = segments.length; i < ii; ++i) {\n                var segment = segments[i];\n                for (var s = 0, ss = segment.length; s < ss; ++s) {\n                    var feature = segment[s].feature;\n                    if (feature && features.indexOf(feature) === -1) {\n                        this.featuresBeingModified_.push(feature);\n                    }\n                }\n            }\n            if (this.featuresBeingModified_.getLength() === 0) {\n                this.featuresBeingModified_ = null;\n            }\n            else {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.featuresBeingModified_, evt));\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeature_ = function (feature) {\n        this.removeFeatureSegmentData_(feature);\n        // Remove the vertex feature if the collection of candidate features is empty.\n        if (this.vertexFeature_ && this.features_.getLength() === 0) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n    };\n    /**\n     * @param {Feature} feature Feature.\n     * @private\n     */\n    Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n        var rBush = this.rBush_;\n        /** @type {Array<SegmentData>} */\n        var nodesToRemove = [];\n        rBush.forEach(\n        /**\n         * @param {SegmentData} node RTree node.\n         */\n        function (node) {\n            if (feature === node.feature) {\n                nodesToRemove.push(node);\n            }\n        });\n        for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n            var nodeToRemove = nodesToRemove[i];\n            for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n                if (this.dragSegments_[j][0] === nodeToRemove) {\n                    this.dragSegments_.splice(j, 1);\n                }\n            }\n            rBush.remove(nodeToRemove);\n        }\n    };\n    /**\n     * Activate or deactivate the interaction.\n     * @param {boolean} active Active.\n     * @observable\n     * @api\n     */\n    Modify.prototype.setActive = function (active) {\n        if (this.vertexFeature_ && !active) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n        _super.prototype.setActive.call(this, active);\n    };\n    /**\n     * Remove the interaction from its current map and attach it to the new map.\n     * Subclasses may set up event handlers to get notified about changes to\n     * the map here.\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     */\n    Modify.prototype.setMap = function (map) {\n        this.overlay_.setMap(map);\n        _super.prototype.setMap.call(this, map);\n    };\n    /**\n     * Get the overlay layer that this interaction renders the modification point or vertex to.\n     * @return {VectorLayer} Overlay layer.\n     * @api\n     */\n    Modify.prototype.getOverlay = function () {\n        return this.overlay_;\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceAdd_ = function (event) {\n        if (event.feature) {\n            this.features_.push(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n     * @private\n     */\n    Modify.prototype.handleSourceRemove_ = function (event) {\n        if (event.feature) {\n            this.features_.remove(event.feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureAdd_ = function (evt) {\n        this.addFeature_(/** @type {Feature} */ (evt.element));\n    };\n    /**\n     * @param {import(\"../events/Event.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureChange_ = function (evt) {\n        if (!this.changingFeature_) {\n            var feature = /** @type {Feature} */ (evt.target);\n            this.removeFeature_(feature);\n            this.addFeature_(feature);\n        }\n    };\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n     * @private\n     */\n    Modify.prototype.handleFeatureRemove_ = function (evt) {\n        var feature = /** @type {Feature} */ (evt.element);\n        this.removeFeature_(feature);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {Point} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        /** @type {SegmentData} */\n        var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            segment: [coordinates, coordinates],\n        };\n        this.rBush_.insert(geometry.getExtent(), segmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n        var points = geometry.getCoordinates();\n        for (var i = 0, ii = points.length; i < ii; ++i) {\n            var coordinates = points[i];\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                depth: [i],\n                index: i,\n                segment: [coordinates, coordinates],\n            };\n            this.rBush_.insert(geometry.getExtent(), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCoordinates();\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n            var segment = coordinates.slice(i, i + 2);\n            /** @type {SegmentData} */\n            var segmentData = {\n                feature: feature,\n                geometry: geometry,\n                index: i,\n                segment: segment,\n            };\n            this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n        var lines = geometry.getCoordinates();\n        for (var j = 0, jj = lines.length; j < jj; ++j) {\n            var coordinates = lines[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n        var rings = geometry.getCoordinates();\n        for (var j = 0, jj = rings.length; j < jj; ++j) {\n            var coordinates = rings[j];\n            for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                var segment = coordinates.slice(i, i + 2);\n                /** @type {SegmentData} */\n                var segmentData = {\n                    feature: feature,\n                    geometry: geometry,\n                    depth: [j],\n                    index: i,\n                    segment: segment,\n                };\n                this.rBush_.insert(boundingExtent(segment), segmentData);\n            }\n        }\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n        var polygons = geometry.getCoordinates();\n        for (var k = 0, kk = polygons.length; k < kk; ++k) {\n            var rings = polygons[k];\n            for (var j = 0, jj = rings.length; j < jj; ++j) {\n                var coordinates = rings[j];\n                for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n                    var segment = coordinates.slice(i, i + 2);\n                    /** @type {SegmentData} */\n                    var segmentData = {\n                        feature: feature,\n                        geometry: geometry,\n                        depth: [j, k],\n                        index: i,\n                        segment: segment,\n                    };\n                    this.rBush_.insert(boundingExtent(segment), segmentData);\n                }\n            }\n        }\n    };\n    /**\n     * We convert a circle into two segments.  The segment at index\n     * {@link CIRCLE_CENTER_INDEX} is the\n     * circle's center (a point).  The segment at index\n     * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n     * the circumference, and is not a line segment.\n     *\n     * @param {Feature} feature Feature.\n     * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n        var coordinates = geometry.getCenter();\n        /** @type {SegmentData} */\n        var centerSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CENTER_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        /** @type {SegmentData} */\n        var circumferenceSegmentData = {\n            feature: feature,\n            geometry: geometry,\n            index: CIRCLE_CIRCUMFERENCE_INDEX,\n            segment: [coordinates, coordinates],\n        };\n        var featureSegments = [centerSegmentData, circumferenceSegmentData];\n        centerSegmentData.featureSegments = featureSegments;\n        circumferenceSegmentData.featureSegments = featureSegments;\n        this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection && this.getMap()) {\n            var projection = this.getMap().getView().getProjection();\n            circleGeometry = circleGeometry\n                .clone()\n                .transform(userProjection, projection);\n            circleGeometry = fromCircle(\n            /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)).transform(projection, userProjection);\n        }\n        this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n    };\n    /**\n     * @param {Feature} feature Feature\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n     * @private\n     */\n    Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n        var geometries = geometry.getGeometriesArray();\n        for (var i = 0; i < geometries.length; ++i) {\n            var geometry_1 = geometries[i];\n            var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n            writer(feature, geometry_1);\n        }\n    };\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n     * @param {Array<import(\"../Feature\").FeatureLike>} features The features being modified.\n     * @param {Array<import(\"../geom/SimpleGeometry.js\").default>} geometries The geometries being modified.\n     * @return {Feature} Vertex feature.\n     * @private\n     */\n    Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates, features, geometries) {\n        var vertexFeature = this.vertexFeature_;\n        if (!vertexFeature) {\n            vertexFeature = new Feature(new Point(coordinates));\n            this.vertexFeature_ = vertexFeature;\n            this.overlay_.getSource().addFeature(vertexFeature);\n        }\n        else {\n            var geometry = vertexFeature.getGeometry();\n            geometry.setCoordinates(coordinates);\n        }\n        vertexFeature.set('features', features);\n        vertexFeature.set('geometries', geometries);\n        return vertexFeature;\n    };\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may modify the geometry.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n    Modify.prototype.handleEvent = function (mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) {\n            return true;\n        }\n        this.lastPointerEvent_ = mapBrowserEvent;\n        var handled;\n        if (!mapBrowserEvent.map.getView().getInteracting() &&\n            mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n            !this.handlingDownUpSequence) {\n            this.handlePointerMove_(mapBrowserEvent);\n        }\n        if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n            if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n                !this.ignoreNextSingleClick_) {\n                handled = this.removePoint();\n            }\n            else {\n                handled = true;\n            }\n        }\n        if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n            this.ignoreNextSingleClick_ = false;\n        }\n        return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n    };\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     */\n    Modify.prototype.handleDragEvent = function (evt) {\n        this.ignoreNextSingleClick_ = false;\n        this.willModifyFeatures_(evt, this.dragSegments_);\n        var vertex = [\n            evt.coordinate[0] + this.delta_[0],\n            evt.coordinate[1] + this.delta_[1],\n        ];\n        var features = [];\n        var geometries = [];\n        for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n            var dragSegment = this.dragSegments_[i];\n            var segmentData = dragSegment[0];\n            var feature = segmentData.feature;\n            if (features.indexOf(feature) === -1) {\n                features.push(feature);\n            }\n            var geometry = segmentData.geometry;\n            if (geometries.indexOf(geometry) === -1) {\n                geometries.push(geometry);\n            }\n            var depth = segmentData.depth;\n            var coordinates = void 0;\n            var segment = segmentData.segment;\n            var index = dragSegment[1];\n            while (vertex.length < geometry.getStride()) {\n                vertex.push(segment[index][vertex.length]);\n            }\n            switch (geometry.getType()) {\n                case 'Point':\n                    coordinates = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'MultiPoint':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index] = vertex;\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    break;\n                case 'LineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiLineString':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Polygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'MultiPolygon':\n                    coordinates = geometry.getCoordinates();\n                    coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n                    segment[index] = vertex;\n                    break;\n                case 'Circle':\n                    segment[0] = vertex;\n                    segment[1] = vertex;\n                    if (segmentData.index === CIRCLE_CENTER_INDEX) {\n                        this.changingFeature_ = true;\n                        geometry.setCenter(vertex);\n                        this.changingFeature_ = false;\n                    }\n                    else {\n                        // We're dragging the circle's circumference:\n                        this.changingFeature_ = true;\n                        var projection = evt.map.getView().getProjection();\n                        var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n                        var userProjection = getUserProjection();\n                        if (userProjection) {\n                            var circleGeometry = geometry\n                                .clone()\n                                .transform(userProjection, projection);\n                            circleGeometry.setRadius(radius);\n                            radius = circleGeometry\n                                .transform(projection, userProjection)\n                                .getRadius();\n                        }\n                        geometry.setRadius(radius);\n                        this.changingFeature_ = false;\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (coordinates) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n            }\n        }\n        this.createOrUpdateVertexFeature_(vertex, features, geometries);\n    };\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleDownEvent = function (evt) {\n        if (!this.condition_(evt)) {\n            return false;\n        }\n        var pixelCoordinate = evt.coordinate;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n        this.dragSegments_.length = 0;\n        this.featuresBeingModified_ = null;\n        var vertexFeature = this.vertexFeature_;\n        if (vertexFeature) {\n            var projection = evt.map.getView().getProjection();\n            var insertVertices = [];\n            var vertex = vertexFeature.getGeometry().getCoordinates();\n            var vertexExtent = boundingExtent([vertex]);\n            var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n            var componentSegments = {};\n            segmentDataMatches.sort(compareIndexes);\n            for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n                var segmentDataMatch = segmentDataMatches[i];\n                var segment = segmentDataMatch.segment;\n                var uid = getUid(segmentDataMatch.geometry);\n                var depth = segmentDataMatch.depth;\n                if (depth) {\n                    uid += '-' + depth.join('-'); // separate feature components\n                }\n                if (!componentSegments[uid]) {\n                    componentSegments[uid] = new Array(2);\n                }\n                if (segmentDataMatch.geometry.getType() === 'Circle' &&\n                    segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n                    if (coordinatesEqual(closestVertex, vertex) &&\n                        !componentSegments[uid][0]) {\n                        this.dragSegments_.push([segmentDataMatch, 0]);\n                        componentSegments[uid][0] = segmentDataMatch;\n                    }\n                    continue;\n                }\n                if (coordinatesEqual(segment[0], vertex) &&\n                    !componentSegments[uid][0]) {\n                    this.dragSegments_.push([segmentDataMatch, 0]);\n                    componentSegments[uid][0] = segmentDataMatch;\n                    continue;\n                }\n                if (coordinatesEqual(segment[1], vertex) &&\n                    !componentSegments[uid][1]) {\n                    if (componentSegments[uid][0] &&\n                        componentSegments[uid][0].index === 0) {\n                        var coordinates = segmentDataMatch.geometry.getCoordinates();\n                        switch (segmentDataMatch.geometry.getType()) {\n                            // prevent dragging closed linestrings by the connecting node\n                            case 'LineString':\n                            case 'MultiLineString':\n                                continue;\n                            // if dragging the first vertex of a polygon, ensure the other segment\n                            // belongs to the closing vertex of the linear ring\n                            case 'MultiPolygon':\n                                coordinates = coordinates[depth[1]];\n                            /* falls through */\n                            case 'Polygon':\n                                if (segmentDataMatch.index !==\n                                    coordinates[depth[0]].length - 2) {\n                                    continue;\n                                }\n                                break;\n                            default:\n                            // pass\n                        }\n                    }\n                    this.dragSegments_.push([segmentDataMatch, 1]);\n                    componentSegments[uid][1] = segmentDataMatch;\n                    continue;\n                }\n                if (getUid(segment) in this.vertexSegments_ &&\n                    !componentSegments[uid][0] &&\n                    !componentSegments[uid][1] &&\n                    this.insertVertexCondition_(evt)) {\n                    insertVertices.push(segmentDataMatch);\n                }\n            }\n            if (insertVertices.length) {\n                this.willModifyFeatures_(evt, [insertVertices]);\n            }\n            for (var j = insertVertices.length - 1; j >= 0; --j) {\n                this.insertVertex_(insertVertices[j], vertex);\n            }\n        }\n        return !!this.vertexFeature_;\n    };\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @return {boolean} If the event was consumed.\n     */\n    Modify.prototype.handleUpEvent = function (evt) {\n        for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n            var segmentData = this.dragSegments_[i][0];\n            var geometry = segmentData.geometry;\n            if (geometry.getType() === 'Circle') {\n                // Update a circle object in the R* bush:\n                var coordinates = geometry.getCenter();\n                var centerSegmentData = segmentData.featureSegments[0];\n                var circumferenceSegmentData = segmentData.featureSegments[1];\n                centerSegmentData.segment[0] = coordinates;\n                centerSegmentData.segment[1] = coordinates;\n                circumferenceSegmentData.segment[0] = coordinates;\n                circumferenceSegmentData.segment[1] = coordinates;\n                this.rBush_.update(createExtent(coordinates), centerSegmentData);\n                var circleGeometry = geometry;\n                var userProjection = getUserProjection();\n                if (userProjection) {\n                    var projection = evt.map.getView().getProjection();\n                    circleGeometry = circleGeometry\n                        .clone()\n                        .transform(userProjection, projection);\n                    circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n                }\n                this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n            }\n            else {\n                this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n            }\n        }\n        if (this.featuresBeingModified_) {\n            this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            this.featuresBeingModified_ = null;\n        }\n        return false;\n    };\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n     * @private\n     */\n    Modify.prototype.handlePointerMove_ = function (evt) {\n        this.lastPixel_ = evt.pixel;\n        this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n    };\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n     * @param {import(\"../PluggableMap.js\").default} map Map.\n     * @param {import(\"../coordinate.js\").Coordinate} [opt_coordinate] The pixel Coordinate.\n     * @private\n     */\n    Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n        var _this = this;\n        var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n        var projection = map.getView().getProjection();\n        var sortByDistance = function (a, b) {\n            return (projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n                projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection));\n        };\n        /** @type {Array<SegmentData>|undefined} */\n        var nodes;\n        var hitPointGeometry;\n        if (this.hitDetection_) {\n            var layerFilter = typeof this.hitDetection_ === 'object'\n                ? function (layer) { return layer === _this.hitDetection_; }\n                : undefined;\n            map.forEachFeatureAtPixel(pixel, function (feature, layer, geometry) {\n                geometry =\n                    geometry ||\n                        /** @type {import(\"../geom/SimpleGeometry\").default} */ (feature.getGeometry());\n                if (geometry.getType() === 'Point' &&\n                    includes(_this.features_.getArray(), feature)) {\n                    hitPointGeometry = geometry;\n                    var coordinate = geometry.getFlatCoordinates().slice(0, 2);\n                    nodes = [\n                        {\n                            feature: feature,\n                            geometry: geometry,\n                            segment: [coordinate, coordinate],\n                        },\n                    ];\n                }\n                return true;\n            }, { layerFilter: layerFilter });\n        }\n        if (!nodes) {\n            var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n            var buffer = map.getView().getResolution() * this.pixelTolerance_;\n            var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n            nodes = this.rBush_.getInExtent(box);\n        }\n        if (nodes && nodes.length > 0) {\n            var node = nodes.sort(sortByDistance)[0];\n            var closestSegment = node.segment;\n            var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n            var vertexPixel = map.getPixelFromCoordinate(vertex);\n            var dist = coordinateDistance(pixel, vertexPixel);\n            if (hitPointGeometry || dist <= this.pixelTolerance_) {\n                /** @type {Object<string, boolean>} */\n                var vertexSegments = {};\n                vertexSegments[getUid(closestSegment)] = true;\n                if (!this.snapToPointer_) {\n                    this.delta_[0] = vertex[0] - pixelCoordinate[0];\n                    this.delta_[1] = vertex[1] - pixelCoordinate[1];\n                }\n                if (node.geometry.getType() === 'Circle' &&\n                    node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n                    this.snappedToVertex_ = true;\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                }\n                else {\n                    var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n                    var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n                    var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n                    var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n                    dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n                    this.snappedToVertex_ = dist <= this.pixelTolerance_;\n                    if (this.snappedToVertex_) {\n                        vertex =\n                            squaredDist1 > squaredDist2\n                                ? closestSegment[1]\n                                : closestSegment[0];\n                    }\n                    this.createOrUpdateVertexFeature_(vertex, [node.feature], [node.geometry]);\n                    var geometries = {};\n                    geometries[getUid(node.geometry)] = true;\n                    for (var i = 1, ii = nodes.length; i < ii; ++i) {\n                        var segment = nodes[i].segment;\n                        if ((coordinatesEqual(closestSegment[0], segment[0]) &&\n                            coordinatesEqual(closestSegment[1], segment[1])) ||\n                            (coordinatesEqual(closestSegment[0], segment[1]) &&\n                                coordinatesEqual(closestSegment[1], segment[0]))) {\n                            var geometryUid = getUid(nodes[i].geometry);\n                            if (!(geometryUid in geometries)) {\n                                geometries[geometryUid] = true;\n                                vertexSegments[getUid(segment)] = true;\n                            }\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                }\n                this.vertexSegments_ = vertexSegments;\n                return;\n            }\n        }\n        if (this.vertexFeature_) {\n            this.overlay_.getSource().removeFeature(this.vertexFeature_);\n            this.vertexFeature_ = null;\n        }\n    };\n    /**\n     * @param {SegmentData} segmentData Segment data.\n     * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n     * @private\n     */\n    Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n        var segment = segmentData.segment;\n        var feature = segmentData.feature;\n        var geometry = segmentData.geometry;\n        var depth = segmentData.depth;\n        var index = segmentData.index;\n        var coordinates;\n        while (vertex.length < geometry.getStride()) {\n            vertex.push(0);\n        }\n        switch (geometry.getType()) {\n            case 'MultiLineString':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'Polygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'MultiPolygon':\n                coordinates = geometry.getCoordinates();\n                coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n                break;\n            case 'LineString':\n                coordinates = geometry.getCoordinates();\n                coordinates.splice(index + 1, 0, vertex);\n                break;\n            default:\n                return;\n        }\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var rTree = this.rBush_;\n        rTree.remove(segmentData);\n        this.updateSegmentIndices_(geometry, index, depth, 1);\n        /** @type {SegmentData} */\n        var newSegmentData = {\n            segment: [segment[0], vertex],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index,\n        };\n        rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        this.dragSegments_.push([newSegmentData, 1]);\n        /** @type {SegmentData} */\n        var newSegmentData2 = {\n            segment: [vertex, segment[1]],\n            feature: feature,\n            geometry: geometry,\n            depth: depth,\n            index: index + 1,\n        };\n        rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n        this.dragSegments_.push([newSegmentData2, 0]);\n        this.ignoreNextSingleClick_ = true;\n    };\n    /**\n     * Removes the vertex currently being pointed.\n     * @return {boolean} True when a vertex was removed.\n     * @api\n     */\n    Modify.prototype.removePoint = function () {\n        if (this.lastPointerEvent_ &&\n            this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n            var evt = this.lastPointerEvent_;\n            this.willModifyFeatures_(evt, this.dragSegments_);\n            var removed = this.removeVertex_();\n            if (this.featuresBeingModified_) {\n                this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.featuresBeingModified_, evt));\n            }\n            this.featuresBeingModified_ = null;\n            return removed;\n        }\n        return false;\n    };\n    /**\n     * Removes a vertex from all matching features.\n     * @return {boolean} True when a vertex was removed.\n     * @private\n     */\n    Modify.prototype.removeVertex_ = function () {\n        var dragSegments = this.dragSegments_;\n        var segmentsByFeature = {};\n        var deleted = false;\n        var component, coordinates, dragSegment, geometry, i, index, left;\n        var newIndex, right, segmentData, uid;\n        for (i = dragSegments.length - 1; i >= 0; --i) {\n            dragSegment = dragSegments[i];\n            segmentData = dragSegment[0];\n            uid = getUid(segmentData.feature);\n            if (segmentData.depth) {\n                // separate feature components\n                uid += '-' + segmentData.depth.join('-');\n            }\n            if (!(uid in segmentsByFeature)) {\n                segmentsByFeature[uid] = {};\n            }\n            if (dragSegment[1] === 0) {\n                segmentsByFeature[uid].right = segmentData;\n                segmentsByFeature[uid].index = segmentData.index;\n            }\n            else if (dragSegment[1] == 1) {\n                segmentsByFeature[uid].left = segmentData;\n                segmentsByFeature[uid].index = segmentData.index + 1;\n            }\n        }\n        for (uid in segmentsByFeature) {\n            right = segmentsByFeature[uid].right;\n            left = segmentsByFeature[uid].left;\n            index = segmentsByFeature[uid].index;\n            newIndex = index - 1;\n            if (left !== undefined) {\n                segmentData = left;\n            }\n            else {\n                segmentData = right;\n            }\n            if (newIndex < 0) {\n                newIndex = 0;\n            }\n            geometry = segmentData.geometry;\n            coordinates = geometry.getCoordinates();\n            component = coordinates;\n            deleted = false;\n            switch (geometry.getType()) {\n                case 'MultiLineString':\n                    if (coordinates[segmentData.depth[0]].length > 2) {\n                        coordinates[segmentData.depth[0]].splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'LineString':\n                    if (coordinates.length > 2) {\n                        coordinates.splice(index, 1);\n                        deleted = true;\n                    }\n                    break;\n                case 'MultiPolygon':\n                    component = component[segmentData.depth[1]];\n                /* falls through */\n                case 'Polygon':\n                    component = component[segmentData.depth[0]];\n                    if (component.length > 4) {\n                        if (index == component.length - 1) {\n                            index = 0;\n                        }\n                        component.splice(index, 1);\n                        deleted = true;\n                        if (index === 0) {\n                            // close the ring again\n                            component.pop();\n                            component.push(component[0]);\n                            newIndex = component.length - 1;\n                        }\n                    }\n                    break;\n                default:\n                // pass\n            }\n            if (deleted) {\n                this.setGeometryCoordinates_(geometry, coordinates);\n                var segments = [];\n                if (left !== undefined) {\n                    this.rBush_.remove(left);\n                    segments.push(left.segment[0]);\n                }\n                if (right !== undefined) {\n                    this.rBush_.remove(right);\n                    segments.push(right.segment[1]);\n                }\n                if (left !== undefined && right !== undefined) {\n                    /** @type {SegmentData} */\n                    var newSegmentData = {\n                        depth: segmentData.depth,\n                        feature: segmentData.feature,\n                        geometry: segmentData.geometry,\n                        index: newIndex,\n                        segment: segments,\n                    };\n                    this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n                }\n                this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n                if (this.vertexFeature_) {\n                    this.overlay_.getSource().removeFeature(this.vertexFeature_);\n                    this.vertexFeature_ = null;\n                }\n                dragSegments.length = 0;\n            }\n        }\n        return deleted;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {Array} coordinates Coordinates.\n     * @private\n     */\n    Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n        this.changingFeature_ = true;\n        geometry.setCoordinates(coordinates);\n        this.changingFeature_ = false;\n    };\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} index Index.\n     * @param {Array<number>|undefined} depth Depth.\n     * @param {number} delta Delta (1 or -1).\n     * @private\n     */\n    Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n        this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n            if (segmentDataMatch.geometry === geometry &&\n                (depth === undefined ||\n                    segmentDataMatch.depth === undefined ||\n                    equals(segmentDataMatch.depth, depth)) &&\n                segmentDataMatch.index > index) {\n                segmentDataMatch.index += delta;\n            }\n        });\n    };\n    return Modify;\n}(PointerInteraction));\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n    return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle') {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n            var userProjection = getUserProjection();\n            if (userProjection) {\n                circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n            }\n            var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n            var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n            return distanceToCircumference * distanceToCircumference;\n        }\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n    var geometry = segmentData.geometry;\n    if (geometry.getType() === 'Circle' &&\n        segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n        var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n        var userProjection = getUserProjection();\n        if (userProjection) {\n            circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry.clone().transform(userProjection, projection));\n        }\n        return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n    }\n    var coordinate = fromUserCoordinate(pointCoordinates, projection);\n    tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n    tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n    return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n    var style = createEditingStyle();\n    return function (feature, resolution) {\n        return style['Point'];\n    };\n}\nexport default Modify;\n//# sourceMappingURL=Modify.js.map"]},"metadata":{},"sourceType":"module"}