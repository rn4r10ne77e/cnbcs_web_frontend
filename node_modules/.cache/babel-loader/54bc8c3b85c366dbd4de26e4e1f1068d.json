{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nvar canvasPool = [];\nvar VectorRenderTile = /** @class */function (_super) {\n  __extends(VectorRenderTile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n    var _this = _super.call(this, tileCoord, state, {\n      transition: 0\n    }) || this;\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n    _this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    _this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n    _this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    _this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n    _this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n    _this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  VectorRenderTile.prototype.getContext = function (layer) {\n    var key = getUid(layer);\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_[key];\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n  VectorRenderTile.prototype.hasContext = function (layer) {\n    return getUid(layer) in this.context_;\n  };\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  VectorRenderTile.prototype.getImage = function (layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n  VectorRenderTile.prototype.getReplayState = function (layer) {\n    var key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n    return this.replayState_[key];\n  };\n  /**\n   * Load the tile.\n   */\n  VectorRenderTile.prototype.load = function () {\n    this.getSourceTiles();\n  };\n  /**\n   * Remove from the cache due to expiry\n   */\n  VectorRenderTile.prototype.release = function () {\n    for (var key in this.context_) {\n      var context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n    _super.prototype.release.call(this);\n  };\n  return VectorRenderTile;\n}(Tile);\nexport default VectorRenderTile;","map":{"version":3,"sources":["src/VectorRenderTile.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nvar canvasPool = [];\nvar VectorRenderTile = /** @class */ (function (_super) {\n    __extends(VectorRenderTile, _super);\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"./TileState.js\").default} state State.\n     * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n     * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n     * to get source tiles for this tile.\n     */\n    function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n        var _this = _super.call(this, tileCoord, state, { transition: 0 }) || this;\n        /**\n         * @private\n         * @type {!Object<string, CanvasRenderingContext2D>}\n         */\n        _this.context_ = {};\n        /**\n         * Executor groups by layer uid. Entries are read/written by the renderer.\n         * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n         */\n        _this.executorGroups = {};\n        /**\n         * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n         * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n         */\n        _this.declutterExecutorGroups = {};\n        /**\n         * Number of loading source tiles. Read/written by the source.\n         * @type {number}\n         */\n        _this.loadingSourceTiles = 0;\n        /**\n         * @type {Object<number, ImageData>}\n         */\n        _this.hitDetectionImageData = {};\n        /**\n         * @private\n         * @type {!Object<string, ReplayState>}\n         */\n        _this.replayState_ = {};\n        /**\n         * @type {Array<import(\"./VectorTile.js\").default>}\n         */\n        _this.sourceTiles = [];\n        /**\n         * @type {Object<string, boolean>}\n         */\n        _this.errorTileKeys = {};\n        /**\n         * @type {number}\n         */\n        _this.wantedResolution;\n        /**\n         * @type {!function():Array<import(\"./VectorTile.js\").default>}\n         */\n        _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n        /**\n         * @type {import(\"./tilecoord.js\").TileCoord}\n         */\n        _this.wrappedTileCoord = urlTileCoord;\n        return _this;\n    }\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {CanvasRenderingContext2D} The rendering context.\n     */\n    VectorRenderTile.prototype.getContext = function (layer) {\n        var key = getUid(layer);\n        if (!(key in this.context_)) {\n            this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n        }\n        return this.context_[key];\n    };\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {boolean} Tile has a rendering context for the given layer.\n     */\n    VectorRenderTile.prototype.hasContext = function (layer) {\n        return getUid(layer) in this.context_;\n    };\n    /**\n     * Get the Canvas for this tile.\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {HTMLCanvasElement} Canvas.\n     */\n    VectorRenderTile.prototype.getImage = function (layer) {\n        return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n    };\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {ReplayState} The replay state.\n     */\n    VectorRenderTile.prototype.getReplayState = function (layer) {\n        var key = getUid(layer);\n        if (!(key in this.replayState_)) {\n            this.replayState_[key] = {\n                dirty: false,\n                renderedRenderOrder: null,\n                renderedResolution: NaN,\n                renderedRevision: -1,\n                renderedTileResolution: NaN,\n                renderedTileRevision: -1,\n                renderedTileZ: -1,\n            };\n        }\n        return this.replayState_[key];\n    };\n    /**\n     * Load the tile.\n     */\n    VectorRenderTile.prototype.load = function () {\n        this.getSourceTiles();\n    };\n    /**\n     * Remove from the cache due to expiry\n     */\n    VectorRenderTile.prototype.release = function () {\n        for (var key in this.context_) {\n            var context = this.context_[key];\n            releaseCanvas(context);\n            canvasPool.push(context.canvas);\n            delete this.context_[key];\n        }\n        _super.prototype.release.call(this);\n    };\n    return VectorRenderTile;\n}(Tile));\nexport default VectorRenderTile;\n//# sourceMappingURL=VectorRenderTile.js.map"]},"metadata":{},"sourceType":"module"}