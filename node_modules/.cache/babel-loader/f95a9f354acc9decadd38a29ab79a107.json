{"ast":null,"code":"/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { MAC, WEBKIT } from '../has.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n  var conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n  return function (event) {\n    var pass = true;\n    for (var i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport var altKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport var altShiftKeysOnly = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport var focus = function (event) {\n  var targetElement = event.map.getTargetElement();\n  var activeElement = event.map.getOwnerDocument().activeElement;\n  return targetElement.contains(activeElement);\n};\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport var focusWithTabindex = function (event) {\n  return event.map.getTargetElement().hasAttribute('tabindex') ? focus(event) : true;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport var click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport var mouseActionButton = function (mapBrowserEvent) {\n  var originalEvent = /** @type {MouseEvent} */mapBrowserEvent.originalEvent;\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport var pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport var singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport var doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport var noModifierKeys = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport var platformModifierKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport var shiftKeyOnly = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\n/**\n * Return `true` if the target element is not editable, i.e. not an `input`,\n * `select`, or `textarea` element and no `contenteditable` attribute is\n * set or inherited, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport var targetNotEditable = function (mapBrowserEvent) {\n  var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */mapBrowserEvent.originalEvent;\n  var tagName = /** @type {Element} */originalEvent.target.tagName;\n  return tagName !== 'INPUT' && tagName !== 'SELECT' && tagName !== 'TEXTAREA' &&\n  // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n  // different type like `SVGElement`.\n  // @ts-ignore\n  !originalEvent.target.isContentEditable;\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport var mouseOnly = function (mapBrowserEvent) {\n  var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport var touchOnly = function (mapBrowserEvent) {\n  var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport var penOnly = function (mapBrowserEvent) {\n  var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport var primaryAction = function (mapBrowserEvent) {\n  var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */mapBrowserEvent.originalEvent;\n  assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};","map":{"version":3,"sources":["../src/events/condition.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { MAC, WEBKIT } from '../has.js';\nimport { assert } from '../asserts.js';\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n    var conditions = arguments;\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n     * @return {boolean} All conditions passed.\n     */\n    return function (event) {\n        var pass = true;\n        for (var i = 0, ii = conditions.length; i < ii; ++i) {\n            pass = pass && conditions[i](event);\n            if (!pass) {\n                break;\n            }\n        }\n        return pass;\n    };\n}\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport var altKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport var altShiftKeysOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport var focus = function (event) {\n    var targetElement = event.map.getTargetElement();\n    var activeElement = event.map.getOwnerDocument().activeElement;\n    return targetElement.contains(activeElement);\n};\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport var focusWithTabindex = function (event) {\n    return event.map.getTargetElement().hasAttribute('tabindex')\n        ? focus(event)\n        : true;\n};\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport var always = TRUE;\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport var click = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport var mouseActionButton = function (mapBrowserEvent) {\n    var originalEvent = /** @type {MouseEvent} */ (mapBrowserEvent.originalEvent);\n    return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport var never = FALSE;\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport var pointerMove = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == 'pointermove';\n};\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport var singleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport var doubleClick = function (mapBrowserEvent) {\n    return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport var noModifierKeys = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport var platformModifierKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n        !originalEvent.shiftKey);\n};\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport var shiftKeyOnly = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    return (!originalEvent.altKey &&\n        !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n        originalEvent.shiftKey);\n};\n/**\n * Return `true` if the target element is not editable, i.e. not an `input`,\n * `select`, or `textarea` element and no `contenteditable` attribute is\n * set or inherited, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport var targetNotEditable = function (mapBrowserEvent) {\n    var originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (mapBrowserEvent.originalEvent);\n    var tagName = /** @type {Element} */ (originalEvent.target).tagName;\n    return (tagName !== 'INPUT' &&\n        tagName !== 'SELECT' &&\n        tagName !== 'TEXTAREA' &&\n        // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n        // different type like `SVGElement`.\n        // @ts-ignore\n        !originalEvent.target.isContentEditable);\n};\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport var mouseOnly = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvent.pointerType == 'mouse';\n};\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport var touchOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'touch';\n};\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport var penOnly = function (mapBrowserEvent) {\n    var pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvt !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === 'pen';\n};\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport var primaryAction = function (mapBrowserEvent) {\n    var pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (mapBrowserEvent).originalEvent;\n    assert(pointerEvent !== undefined, 56); // mapBrowserEvent must originate from a pointer event\n    return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n//# sourceMappingURL=condition.js.map"]},"metadata":{},"sourceType":"module"}