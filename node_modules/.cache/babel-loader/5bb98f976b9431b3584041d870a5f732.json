{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /** @class */function (_super) {\n  __extends(Attribution, _super);\n  /**\n   * @param {Options} [opt_options] Attribution options.\n   */\n  function Attribution(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.ulElement_ = document.createElement('ul');\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.userCollapsed_ = _this.collapsed_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n    var collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n      _this.collapseLabel_.className = collapseClassName;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n      _this.label_.className = expandClassName;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.toggleButton_ = document.createElement('button');\n    _this.toggleButton_.setAttribute('type', 'button');\n    _this.toggleButton_.setAttribute('aria-expanded', String(!_this.collapsed_));\n    _this.toggleButton_.title = tipLabel;\n    _this.toggleButton_.appendChild(activeLabel);\n    _this.toggleButton_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.toggleButton_);\n    element.appendChild(_this.ulElement_);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    _this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderedVisible_ = true;\n    return _this;\n  }\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    var lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    var visibleAttributions = [];\n    var collapsible = true;\n    var layerStatesArray = frameState.layerStatesArray;\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n      var source = /** @type {import(\"../layer/Layer.js\").default} */layerState.layer.getSource();\n      if (!source) {\n        continue;\n      }\n      var attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n      var attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n      collapsible = collapsible && source.getAttributionsCollapsible() !== false;\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  };\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  Attribution.prototype.updateElement_ = function (frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n    removeChildren(this.ulElement_);\n    // append the attributions\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n    this.renderedAttributions_ = attributions;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  Attribution.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  };\n  /**\n   * @private\n   */\n  Attribution.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  };\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.setCollapsed = function (collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  Attribution.prototype.render = function (mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  };\n  return Attribution;\n}(Control);\nexport default Attribution;","map":{"version":3,"sources":["../src/control/Attribution.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /** @class */ (function (_super) {\n    __extends(Attribution, _super);\n    /**\n     * @param {Options} [opt_options] Attribution options.\n     */\n    function Attribution(opt_options) {\n        var _this = this;\n        var options = opt_options ? opt_options : {};\n        _this = _super.call(this, {\n            element: document.createElement('div'),\n            render: options.render,\n            target: options.target,\n        }) || this;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.ulElement_ = document.createElement('ul');\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsed_ =\n            options.collapsed !== undefined ? options.collapsed : true;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.userCollapsed_ = _this.collapsed_;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.overrideCollapsible_ = options.collapsible !== undefined;\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.collapsible_ =\n            options.collapsible !== undefined ? options.collapsible : true;\n        if (!_this.collapsible_) {\n            _this.collapsed_ = false;\n        }\n        var className = options.className !== undefined ? options.className : 'ol-attribution';\n        var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n        var expandClassName = options.expandClassName !== undefined\n            ? options.expandClassName\n            : className + '-expand';\n        var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n        var collapseClassName = options.collapseClassName !== undefined\n            ? options.collapseClassName\n            : className + '-collapse';\n        if (typeof collapseLabel === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.collapseLabel_ = document.createElement('span');\n            _this.collapseLabel_.textContent = collapseLabel;\n            _this.collapseLabel_.className = collapseClassName;\n        }\n        else {\n            _this.collapseLabel_ = collapseLabel;\n        }\n        var label = options.label !== undefined ? options.label : 'i';\n        if (typeof label === 'string') {\n            /**\n             * @private\n             * @type {HTMLElement}\n             */\n            _this.label_ = document.createElement('span');\n            _this.label_.textContent = label;\n            _this.label_.className = expandClassName;\n        }\n        else {\n            _this.label_ = label;\n        }\n        var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n        /**\n         * @private\n         * @type {HTMLElement}\n         */\n        _this.toggleButton_ = document.createElement('button');\n        _this.toggleButton_.setAttribute('type', 'button');\n        _this.toggleButton_.setAttribute('aria-expanded', String(!_this.collapsed_));\n        _this.toggleButton_.title = tipLabel;\n        _this.toggleButton_.appendChild(activeLabel);\n        _this.toggleButton_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n        var cssClasses = className +\n            ' ' +\n            CLASS_UNSELECTABLE +\n            ' ' +\n            CLASS_CONTROL +\n            (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n            (_this.collapsible_ ? '' : ' ol-uncollapsible');\n        var element = _this.element;\n        element.className = cssClasses;\n        element.appendChild(_this.toggleButton_);\n        element.appendChild(_this.ulElement_);\n        /**\n         * A list of currently rendered resolutions.\n         * @type {Array<string>}\n         * @private\n         */\n        _this.renderedAttributions_ = [];\n        /**\n         * @private\n         * @type {boolean}\n         */\n        _this.renderedVisible_ = true;\n        return _this;\n    }\n    /**\n     * Collect a list of visible attributions and set the collapsible state.\n     * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     * @return {Array<string>} Attributions.\n     * @private\n     */\n    Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n        /**\n         * Used to determine if an attribution already exists.\n         * @type {!Object<string, boolean>}\n         */\n        var lookup = {};\n        /**\n         * A list of visible attributions.\n         * @type {Array<string>}\n         */\n        var visibleAttributions = [];\n        var collapsible = true;\n        var layerStatesArray = frameState.layerStatesArray;\n        for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n            var layerState = layerStatesArray[i];\n            if (!inView(layerState, frameState.viewState)) {\n                continue;\n            }\n            var source = /** @type {import(\"../layer/Layer.js\").default} */ (layerState.layer).getSource();\n            if (!source) {\n                continue;\n            }\n            var attributionGetter = source.getAttributions();\n            if (!attributionGetter) {\n                continue;\n            }\n            var attributions = attributionGetter(frameState);\n            if (!attributions) {\n                continue;\n            }\n            collapsible =\n                collapsible && source.getAttributionsCollapsible() !== false;\n            if (Array.isArray(attributions)) {\n                for (var j = 0, jj = attributions.length; j < jj; ++j) {\n                    if (!(attributions[j] in lookup)) {\n                        visibleAttributions.push(attributions[j]);\n                        lookup[attributions[j]] = true;\n                    }\n                }\n            }\n            else {\n                if (!(attributions in lookup)) {\n                    visibleAttributions.push(attributions);\n                    lookup[attributions] = true;\n                }\n            }\n        }\n        if (!this.overrideCollapsible_) {\n            this.setCollapsible(collapsible);\n        }\n        return visibleAttributions;\n    };\n    /**\n     * @private\n     * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n    Attribution.prototype.updateElement_ = function (frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element.style.display = 'none';\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        var attributions = this.collectSourceAttributions_(frameState);\n        var visible = attributions.length > 0;\n        if (this.renderedVisible_ != visible) {\n            this.element.style.display = visible ? '' : 'none';\n            this.renderedVisible_ = visible;\n        }\n        if (equals(attributions, this.renderedAttributions_)) {\n            return;\n        }\n        removeChildren(this.ulElement_);\n        // append the attributions\n        for (var i = 0, ii = attributions.length; i < ii; ++i) {\n            var element = document.createElement('li');\n            element.innerHTML = attributions[i];\n            this.ulElement_.appendChild(element);\n        }\n        this.renderedAttributions_ = attributions;\n    };\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n    Attribution.prototype.handleClick_ = function (event) {\n        event.preventDefault();\n        this.handleToggle_();\n        this.userCollapsed_ = this.collapsed_;\n    };\n    /**\n     * @private\n     */\n    Attribution.prototype.handleToggle_ = function () {\n        this.element.classList.toggle(CLASS_COLLAPSED);\n        if (this.collapsed_) {\n            replaceNode(this.collapseLabel_, this.label_);\n        }\n        else {\n            replaceNode(this.label_, this.collapseLabel_);\n        }\n        this.collapsed_ = !this.collapsed_;\n        this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    };\n    /**\n     * Return `true` if the attribution is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n    Attribution.prototype.getCollapsible = function () {\n        return this.collapsible_;\n    };\n    /**\n     * Set whether the attribution should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n    Attribution.prototype.setCollapsible = function (collapsible) {\n        if (this.collapsible_ === collapsible) {\n            return;\n        }\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle('ol-uncollapsible');\n        if (this.userCollapsed_) {\n            this.handleToggle_();\n        }\n    };\n    /**\n     * Collapse or expand the attribution according to the passed parameter. Will\n     * not do anything if the attribution isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n    Attribution.prototype.setCollapsed = function (collapsed) {\n        this.userCollapsed_ = collapsed;\n        if (!this.collapsible_ || this.collapsed_ === collapsed) {\n            return;\n        }\n        this.handleToggle_();\n    };\n    /**\n     * Return `true` when the attribution is currently collapsed or `false`\n     * otherwise.\n     * @return {boolean} True if the widget is collapsed.\n     * @api\n     */\n    Attribution.prototype.getCollapsed = function () {\n        return this.collapsed_;\n    };\n    /**\n     * Update the attribution element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n    Attribution.prototype.render = function (mapEvent) {\n        this.updateElement_(mapEvent.frameState);\n    };\n    return Attribution;\n}(Control));\nexport default Attribution;\n//# sourceMappingURL=Attribution.js.map"]},"metadata":{},"sourceType":"module"}