{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper = /** @class */function (_super) {\n  __extends(ImageWrapper, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.image_ = new Image();\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    _this.state = ImageState.IDLE;\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    _this.imageLoadFunction_ = imageLoadFunction;\n    return _this;\n  }\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  ImageWrapper.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageError_ = function () {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageLoad_ = function () {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  ImageWrapper.prototype.load = function () {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  };\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  ImageWrapper.prototype.setImage = function (image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.unlistenImage_ = function () {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  };\n  return ImageWrapper;\n}(ImageBase);\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  var img = /** @type {HTMLImageElement} */image;\n  var listening = true;\n  var decoding = false;\n  var loaded = false;\n  var listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":{"version":3,"sources":["src/Image.js"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper = /** @class */ (function (_super) {\n    __extends(ImageWrapper, _super);\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {string} src Image source URI.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {LoadFunction} imageLoadFunction Image load function.\n     */\n    function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n        var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;\n        /**\n         * @private\n         * @type {string}\n         */\n        _this.src_ = src;\n        /**\n         * @private\n         * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n         */\n        _this.image_ = new Image();\n        if (crossOrigin !== null) {\n            _this.image_.crossOrigin = crossOrigin;\n        }\n        /**\n         * @private\n         * @type {?function():void}\n         */\n        _this.unlisten_ = null;\n        /**\n         * @protected\n         * @type {import(\"./ImageState.js\").default}\n         */\n        _this.state = ImageState.IDLE;\n        /**\n         * @private\n         * @type {LoadFunction}\n         */\n        _this.imageLoadFunction_ = imageLoadFunction;\n        return _this;\n    }\n    /**\n     * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n     * @api\n     */\n    ImageWrapper.prototype.getImage = function () {\n        return this.image_;\n    };\n    /**\n     * Tracks loading or read errors.\n     *\n     * @private\n     */\n    ImageWrapper.prototype.handleImageError_ = function () {\n        this.state = ImageState.ERROR;\n        this.unlistenImage_();\n        this.changed();\n    };\n    /**\n     * Tracks successful image load.\n     *\n     * @private\n     */\n    ImageWrapper.prototype.handleImageLoad_ = function () {\n        if (this.resolution === undefined) {\n            this.resolution = getHeight(this.extent) / this.image_.height;\n        }\n        this.state = ImageState.LOADED;\n        this.unlistenImage_();\n        this.changed();\n    };\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     * @api\n     */\n    ImageWrapper.prototype.load = function () {\n        if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n            this.state = ImageState.LOADING;\n            this.changed();\n            this.imageLoadFunction_(this, this.src_);\n            this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n        }\n    };\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     */\n    ImageWrapper.prototype.setImage = function (image) {\n        this.image_ = image;\n        this.resolution = getHeight(this.extent) / this.image_.height;\n    };\n    /**\n     * Discards event handlers which listen for load completion or errors.\n     *\n     * @private\n     */\n    ImageWrapper.prototype.unlistenImage_ = function () {\n        if (this.unlisten_) {\n            this.unlisten_();\n            this.unlisten_ = null;\n        }\n    };\n    return ImageWrapper;\n}(ImageBase));\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n    var img = /** @type {HTMLImageElement} */ (image);\n    var listening = true;\n    var decoding = false;\n    var loaded = false;\n    var listenerKeys = [\n        listenOnce(img, EventType.LOAD, function () {\n            loaded = true;\n            if (!decoding) {\n                loadHandler();\n            }\n        }),\n    ];\n    if (img.src && IMAGE_DECODE) {\n        decoding = true;\n        img\n            .decode()\n            .then(function () {\n            if (listening) {\n                loadHandler();\n            }\n        })\n            .catch(function (error) {\n            if (listening) {\n                if (loaded) {\n                    loadHandler();\n                }\n                else {\n                    errorHandler();\n                }\n            }\n        });\n    }\n    else {\n        listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n    }\n    return function unlisten() {\n        listening = false;\n        listenerKeys.forEach(unlistenByKey);\n    };\n}\nexport default ImageWrapper;\n//# sourceMappingURL=Image.js.map"]},"metadata":{},"sourceType":"module"}