{"ast":null,"code":"/**\n * @module ol/tileurlfunction\n */\nimport { modulo } from './math.js';\nimport { hash as tileCoordHash } from './tilecoord.js';\nimport { renderXYZTemplate } from './uri.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default|null} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      let maxY;\n      const z = tileCoord[0];\n      if (tileGrid) {\n        // The `{-y}` placeholder only works for sources that have a tile grid at construction\n        const range = tileGrid.getFullTileRange(z);\n        if (range) {\n          maxY = range.getHeight() - 1;\n        }\n      }\n      return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}","map":{"version":3,"names":["modulo","hash","tileCoordHash","renderXYZTemplate","createFromTemplate","template","tileGrid","tileCoord","pixelRatio","projection","undefined","maxY","z","range","getFullTileRange","getHeight","createFromTemplates","templates","len","length","tileUrlFunctions","Array","i","createFromTileUrlFunctions","h","index","nullTileUrlFunction"],"sources":["C:/prj/cnbcs_web_frontend/node_modules/ol/tileurlfunction.js"],"sourcesContent":["/**\n * @module ol/tileurlfunction\n */\nimport {modulo} from './math.js';\nimport {hash as tileCoordHash} from './tilecoord.js';\nimport {renderXYZTemplate} from './uri.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default|null} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      let maxY;\n      const z = tileCoord[0];\n      if (tileGrid) {\n        // The `{-y}` placeholder only works for sources that have a tile grid at construction\n        const range = tileGrid.getFullTileRange(z);\n        if (range) {\n          maxY = range.getHeight() - 1;\n        }\n      }\n      return renderXYZTemplate(template, z, tileCoord[1], tileCoord[2], maxY);\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,IAAIC,aAAa,QAAO,gBAAgB;AACpD,SAAQC,iBAAiB,QAAO,UAAU;;AAE1C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACrD;IACE;AACJ;AACA;AACA;AACA;AACA;IACI,UAAUC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAE;MAC3C,IAAI,CAACF,SAAS,EAAE;QACd,OAAOG,SAAS;MAClB;MACA,IAAIC,IAAI;MACR,MAAMC,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC;MACtB,IAAID,QAAQ,EAAE;QACZ;QACA,MAAMO,KAAK,GAAGP,QAAQ,CAACQ,gBAAgB,CAACF,CAAC,CAAC;QAC1C,IAAIC,KAAK,EAAE;UACTF,IAAI,GAAGE,KAAK,CAACE,SAAS,CAAC,CAAC,GAAG,CAAC;QAC9B;MACF;MACA,OAAOZ,iBAAiB,CAACE,QAAQ,EAAEO,CAAC,EAAEL,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAEI,IAAI,CAAC;IACzE;EAAC;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASK,mBAAmBA,CAACC,SAAS,EAAEX,QAAQ,EAAE;EACvD,MAAMY,GAAG,GAAGD,SAAS,CAACE,MAAM;EAC5B,MAAMC,gBAAgB,GAAG,IAAIC,KAAK,CAACH,GAAG,CAAC;EACvC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAE,EAAEI,CAAC,EAAE;IAC5BF,gBAAgB,CAACE,CAAC,CAAC,GAAGlB,kBAAkB,CAACa,SAAS,CAACK,CAAC,CAAC,EAAEhB,QAAQ,CAAC;EAClE;EACA,OAAOiB,0BAA0B,CAACH,gBAAgB,CAAC;AACrD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASG,0BAA0BA,CAACH,gBAAgB,EAAE;EAC3D,IAAIA,gBAAgB,CAACD,MAAM,KAAK,CAAC,EAAE;IACjC,OAAOC,gBAAgB,CAAC,CAAC,CAAC;EAC5B;EACA;IACE;AACJ;AACA;AACA;AACA;AACA;IACI,UAAUb,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAE;MAC3C,IAAI,CAACF,SAAS,EAAE;QACd,OAAOG,SAAS;MAClB;MACA,MAAMc,CAAC,GAAGtB,aAAa,CAACK,SAAS,CAAC;MAClC,MAAMkB,KAAK,GAAGzB,MAAM,CAACwB,CAAC,EAAEJ,gBAAgB,CAACD,MAAM,CAAC;MAChD,OAAOC,gBAAgB,CAACK,KAAK,CAAC,CAAClB,SAAS,EAAEC,UAAU,EAAEC,UAAU,CAAC;IACnE;EAAC;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,mBAAmBA,CAACnB,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAE;EACrE,OAAOC,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module"}