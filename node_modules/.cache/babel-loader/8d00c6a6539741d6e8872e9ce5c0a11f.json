{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  var called = false;\n  /** @type {ReturnType} */\n  var lastResult;\n  /** @type {Array<any>} */\n  var lastArgs;\n  var lastThis;\n  return function () {\n    var nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    var value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}","map":{"version":3,"sources":["src/functions.js"],"names":[],"mappings":"AAAA;;AAEG;AAEH,SAAQ,MAAM,IAAI,WAAW,QAAO,YAAY;AAEhD;;;AAGG;AACH,OAAM,SAAU,IAAI,CAAA,EAAA;EAClB,OAAO,IAAI;AACb;AAEA;;;AAGG;AACH,OAAM,SAAU,KAAK,CAAA,EAAA;EACnB,OAAO,KAAK;AACd;AAEA;;;;AAIG;AACH,OAAM,SAAU,IAAI,CAAA,EAAA,CAAI;AAExB;;;;;;;;AAQG;AACH,OAAM,SAAU,UAAU,CAAC,EAAE,EAAA;EAC3B,IAAI,MAAM,GAAG,KAAK;EAElB;EACA,IAAI,UAAU;EAEd;EACA,IAAI,QAAQ;EAEZ,IAAI,QAAQ;EAEZ,OAAO,YAAA;IACL,IAAM,QAAQ,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;IACtD,IAAI,CAAC,MAAM,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;MACpE,MAAM,GAAG,IAAI;MACb,QAAQ,GAAG,IAAI;MACf,QAAQ,GAAG,QAAQ;MACnB,UAAU,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC;IACvC;IACD,OAAO,UAAU;EACnB,CAAC;AACH;AAEA;;;;AAIG;AACH,OAAM,SAAU,SAAS,CAAC,MAAM,EAAA;EAC9B,SAAS,aAAa,CAAA,EAAA;IACpB,IAAI,KAAK;IACT,IAAI;MACF,KAAK,GAAG,MAAM,CAAA,CAAE;KACjB,CAAC,OAAO,GAAG,EAAE;MACZ,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;IAC3B;IACD,IAAI,KAAK,YAAY,OAAO,EAAE;MAC5B,OAAO,KAAK;IACb;IACD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;EAC/B;EACA,OAAO,aAAa,CAAA,CAAE;AACxB","sourceRoot":"","sourcesContent":["/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n    return true;\n}\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n    return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() { }\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n    var called = false;\n    /** @type {ReturnType} */\n    var lastResult;\n    /** @type {Array<any>} */\n    var lastArgs;\n    var lastThis;\n    return function () {\n        var nextArgs = Array.prototype.slice.call(arguments);\n        if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n            called = true;\n            lastThis = this;\n            lastArgs = nextArgs;\n            lastResult = fn.apply(this, arguments);\n        }\n        return lastResult;\n    };\n}\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n    function promiseGetter() {\n        var value;\n        try {\n            value = getter();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n        if (value instanceof Promise) {\n            return value;\n        }\n        return Promise.resolve(value);\n    }\n    return promiseGetter();\n}\n//# sourceMappingURL=functions.js.map"]},"metadata":{},"sourceType":"module"}